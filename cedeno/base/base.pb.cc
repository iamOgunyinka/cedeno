// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base/base.proto

#include "base/base.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace trader {
PROTOBUF_CONSTEXPR PriceRecord::PriceRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timestamp_sec_)*/int64_t{0}
  , /*decltype(_impl_.price_)*/0
  , /*decltype(_impl_.volume_)*/0} {}
struct PriceRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PriceRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PriceRecordDefaultTypeInternal() {}
  union {
    PriceRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PriceRecordDefaultTypeInternal _PriceRecord_default_instance_;
PROTOBUF_CONSTEXPR OhlcTick::OhlcTick(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timestamp_sec_)*/int64_t{0}
  , /*decltype(_impl_.open_)*/0
  , /*decltype(_impl_.high_)*/0
  , /*decltype(_impl_.low_)*/0
  , /*decltype(_impl_.close_)*/0
  , /*decltype(_impl_.volume_)*/0} {}
struct OhlcTickDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OhlcTickDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OhlcTickDefaultTypeInternal() {}
  union {
    OhlcTick _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OhlcTickDefaultTypeInternal _OhlcTick_default_instance_;
PROTOBUF_CONSTEXPR SideInputRecord::SideInputRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.signal_)*/{}
  , /*decltype(_impl_.timestamp_sec_)*/int64_t{0}} {}
struct SideInputRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SideInputRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SideInputRecordDefaultTypeInternal() {}
  union {
    SideInputRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SideInputRecordDefaultTypeInternal _SideInputRecord_default_instance_;
PROTOBUF_CONSTEXPR FeeConfig::FeeConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.relative_fee_)*/0
  , /*decltype(_impl_.fixed_fee_)*/0
  , /*decltype(_impl_.minimum_fee_)*/0} {}
struct FeeConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeeConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeeConfigDefaultTypeInternal() {}
  union {
    FeeConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeeConfigDefaultTypeInternal _FeeConfig_default_instance_;
PROTOBUF_CONSTEXPR AccountConfig::AccountConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.market_order_fee_config_)*/nullptr
  , /*decltype(_impl_.stop_order_fee_config_)*/nullptr
  , /*decltype(_impl_.limit_order_fee_config_)*/nullptr
  , /*decltype(_impl_.start_base_balance_)*/0
  , /*decltype(_impl_.start_quote_balance_)*/0
  , /*decltype(_impl_.base_unit_)*/0
  , /*decltype(_impl_.quote_unit_)*/0
  , /*decltype(_impl_.market_liquidity_)*/0
  , /*decltype(_impl_.max_volume_ratio_)*/0} {}
struct AccountConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccountConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccountConfigDefaultTypeInternal() {}
  union {
    AccountConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccountConfigDefaultTypeInternal _AccountConfig_default_instance_;
PROTOBUF_CONSTEXPR Order::Order(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.side_)*/0
  , /*decltype(_impl_.price_)*/0
  , /*decltype(_impl_.oneof_amount_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct OrderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderDefaultTypeInternal() {}
  union {
    Order _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderDefaultTypeInternal _Order_default_instance_;
}  // namespace trader
static ::_pb::Metadata file_level_metadata_base_2fbase_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_base_2fbase_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_base_2fbase_2eproto = nullptr;

const uint32_t TableStruct_base_2fbase_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::trader::PriceRecord, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::trader::PriceRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trader::PriceRecord, _impl_.timestamp_sec_),
  PROTOBUF_FIELD_OFFSET(::trader::PriceRecord, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::trader::PriceRecord, _impl_.volume_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::trader::OhlcTick, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::trader::OhlcTick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trader::OhlcTick, _impl_.timestamp_sec_),
  PROTOBUF_FIELD_OFFSET(::trader::OhlcTick, _impl_.open_),
  PROTOBUF_FIELD_OFFSET(::trader::OhlcTick, _impl_.high_),
  PROTOBUF_FIELD_OFFSET(::trader::OhlcTick, _impl_.low_),
  PROTOBUF_FIELD_OFFSET(::trader::OhlcTick, _impl_.close_),
  PROTOBUF_FIELD_OFFSET(::trader::OhlcTick, _impl_.volume_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::trader::SideInputRecord, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::trader::SideInputRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trader::SideInputRecord, _impl_.timestamp_sec_),
  PROTOBUF_FIELD_OFFSET(::trader::SideInputRecord, _impl_.signal_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::trader::FeeConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::trader::FeeConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trader::FeeConfig, _impl_.relative_fee_),
  PROTOBUF_FIELD_OFFSET(::trader::FeeConfig, _impl_.fixed_fee_),
  PROTOBUF_FIELD_OFFSET(::trader::FeeConfig, _impl_.minimum_fee_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::trader::AccountConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::trader::AccountConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trader::AccountConfig, _impl_.start_base_balance_),
  PROTOBUF_FIELD_OFFSET(::trader::AccountConfig, _impl_.start_quote_balance_),
  PROTOBUF_FIELD_OFFSET(::trader::AccountConfig, _impl_.base_unit_),
  PROTOBUF_FIELD_OFFSET(::trader::AccountConfig, _impl_.quote_unit_),
  PROTOBUF_FIELD_OFFSET(::trader::AccountConfig, _impl_.market_order_fee_config_),
  PROTOBUF_FIELD_OFFSET(::trader::AccountConfig, _impl_.stop_order_fee_config_),
  PROTOBUF_FIELD_OFFSET(::trader::AccountConfig, _impl_.limit_order_fee_config_),
  PROTOBUF_FIELD_OFFSET(::trader::AccountConfig, _impl_.market_liquidity_),
  PROTOBUF_FIELD_OFFSET(::trader::AccountConfig, _impl_.max_volume_ratio_),
  3,
  4,
  5,
  6,
  0,
  1,
  2,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::trader::Order, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::trader::Order, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::trader::Order, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trader::Order, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::trader::Order, _impl_.side_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::trader::Order, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::trader::Order, _impl_.oneof_amount_),
  0,
  1,
  ~0u,
  ~0u,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::trader::PriceRecord)},
  { 12, 24, -1, sizeof(::trader::OhlcTick)},
  { 30, 38, -1, sizeof(::trader::SideInputRecord)},
  { 40, 49, -1, sizeof(::trader::FeeConfig)},
  { 52, 67, -1, sizeof(::trader::AccountConfig)},
  { 76, 88, -1, sizeof(::trader::Order)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::trader::_PriceRecord_default_instance_._instance,
  &::trader::_OhlcTick_default_instance_._instance,
  &::trader::_SideInputRecord_default_instance_._instance,
  &::trader::_FeeConfig_default_instance_._instance,
  &::trader::_AccountConfig_default_instance_._instance,
  &::trader::_Order_default_instance_._instance,
};

const char descriptor_table_protodef_base_2fbase_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017base/base.proto\022\006trader\"C\n\013PriceRecord"
  "\022\025\n\rtimestamp_sec\030\001 \001(\003\022\r\n\005price\030\002 \001(\002\022\016"
  "\n\006volume\030\003 \001(\002\"i\n\010OhlcTick\022\025\n\rtimestamp_"
  "sec\030\001 \001(\003\022\014\n\004open\030\002 \001(\002\022\014\n\004high\030\003 \001(\002\022\013\n"
  "\003low\030\004 \001(\002\022\r\n\005close\030\005 \001(\002\022\016\n\006volume\030\006 \001("
  "\002\"8\n\017SideInputRecord\022\025\n\rtimestamp_sec\030\001 "
  "\001(\003\022\016\n\006signal\030\002 \003(\002\"I\n\tFeeConfig\022\024\n\014rela"
  "tive_fee\030\001 \001(\002\022\021\n\tfixed_fee\030\002 \001(\002\022\023\n\013min"
  "imum_fee\030\003 \001(\002\"\274\002\n\rAccountConfig\022\032\n\022star"
  "t_base_balance\030\001 \001(\002\022\033\n\023start_quote_bala"
  "nce\030\002 \001(\002\022\021\n\tbase_unit\030\003 \001(\002\022\022\n\nquote_un"
  "it\030\004 \001(\002\0222\n\027market_order_fee_config\030\005 \001("
  "\0132\021.trader.FeeConfig\0220\n\025stop_order_fee_c"
  "onfig\030\006 \001(\0132\021.trader.FeeConfig\0221\n\026limit_"
  "order_fee_config\030\007 \001(\0132\021.trader.FeeConfi"
  "g\022\030\n\020market_liquidity\030\010 \001(\002\022\030\n\020max_volum"
  "e_ratio\030\t \001(\002\"\335\001\n\005Order\022 \n\004type\030\001 \001(\0162\022."
  "trader.Order.Type\022 \n\004side\030\002 \001(\0162\022.trader"
  ".Order.Side\022\025\n\013base_amount\030\003 \001(\002H\000\022\026\n\014qu"
  "ote_amount\030\004 \001(\002H\000\022\r\n\005price\030\005 \001(\002\"\'\n\004Typ"
  "e\022\n\n\006MARKET\020\000\022\010\n\004STOP\020\001\022\t\n\005LIMIT\020\002\"\031\n\004Si"
  "de\022\007\n\003BUY\020\000\022\010\n\004SELL\020\001B\016\n\014oneof_amount"
  ;
static ::_pbi::once_flag descriptor_table_base_2fbase_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_base_2fbase_2eproto = {
    false, false, 877, descriptor_table_protodef_base_2fbase_2eproto,
    "base/base.proto",
    &descriptor_table_base_2fbase_2eproto_once, nullptr, 0, 6,
    schemas, file_default_instances, TableStruct_base_2fbase_2eproto::offsets,
    file_level_metadata_base_2fbase_2eproto, file_level_enum_descriptors_base_2fbase_2eproto,
    file_level_service_descriptors_base_2fbase_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_base_2fbase_2eproto_getter() {
  return &descriptor_table_base_2fbase_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_base_2fbase_2eproto(&descriptor_table_base_2fbase_2eproto);
namespace trader {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Order_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_base_2fbase_2eproto);
  return file_level_enum_descriptors_base_2fbase_2eproto[0];
}
bool Order_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Order_Type Order::MARKET;
constexpr Order_Type Order::STOP;
constexpr Order_Type Order::LIMIT;
constexpr Order_Type Order::Type_MIN;
constexpr Order_Type Order::Type_MAX;
constexpr int Order::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Order_Side_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_base_2fbase_2eproto);
  return file_level_enum_descriptors_base_2fbase_2eproto[1];
}
bool Order_Side_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Order_Side Order::BUY;
constexpr Order_Side Order::SELL;
constexpr Order_Side Order::Side_MIN;
constexpr Order_Side Order::Side_MAX;
constexpr int Order::Side_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class PriceRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<PriceRecord>()._impl_._has_bits_);
  static void set_has_timestamp_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_volume(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PriceRecord::PriceRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:trader.PriceRecord)
}
PriceRecord::PriceRecord(const PriceRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PriceRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_sec_){}
    , decltype(_impl_.price_){}
    , decltype(_impl_.volume_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.timestamp_sec_, &from._impl_.timestamp_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.volume_) -
    reinterpret_cast<char*>(&_impl_.timestamp_sec_)) + sizeof(_impl_.volume_));
  // @@protoc_insertion_point(copy_constructor:trader.PriceRecord)
}

inline void PriceRecord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_sec_){int64_t{0}}
    , decltype(_impl_.price_){0}
    , decltype(_impl_.volume_){0}
  };
}

PriceRecord::~PriceRecord() {
  // @@protoc_insertion_point(destructor:trader.PriceRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PriceRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PriceRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PriceRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:trader.PriceRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.timestamp_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.volume_) -
        reinterpret_cast<char*>(&_impl_.timestamp_sec_)) + sizeof(_impl_.volume_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PriceRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 timestamp_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp_sec(&has_bits);
          _impl_.timestamp_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_price(&has_bits);
          _impl_.price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float volume = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_volume(&has_bits);
          _impl_.volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PriceRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trader.PriceRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 timestamp_sec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp_sec(), target);
  }

  // optional float price = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_price(), target);
  }

  // optional float volume = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_volume(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trader.PriceRecord)
  return target;
}

size_t PriceRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trader.PriceRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 timestamp_sec = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp_sec());
    }

    // optional float price = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float volume = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PriceRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PriceRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PriceRecord::GetClassData() const { return &_class_data_; }


void PriceRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PriceRecord*>(&to_msg);
  auto& from = static_cast<const PriceRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:trader.PriceRecord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.timestamp_sec_ = from._impl_.timestamp_sec_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.price_ = from._impl_.price_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.volume_ = from._impl_.volume_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PriceRecord::CopyFrom(const PriceRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trader.PriceRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceRecord::IsInitialized() const {
  return true;
}

void PriceRecord::InternalSwap(PriceRecord* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PriceRecord, _impl_.volume_)
      + sizeof(PriceRecord::_impl_.volume_)
      - PROTOBUF_FIELD_OFFSET(PriceRecord, _impl_.timestamp_sec_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_sec_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_sec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PriceRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_2fbase_2eproto_getter, &descriptor_table_base_2fbase_2eproto_once,
      file_level_metadata_base_2fbase_2eproto[0]);
}

// ===================================================================

class OhlcTick::_Internal {
 public:
  using HasBits = decltype(std::declval<OhlcTick>()._impl_._has_bits_);
  static void set_has_timestamp_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_open(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_high(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_low(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_close(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_volume(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

OhlcTick::OhlcTick(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:trader.OhlcTick)
}
OhlcTick::OhlcTick(const OhlcTick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OhlcTick* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_sec_){}
    , decltype(_impl_.open_){}
    , decltype(_impl_.high_){}
    , decltype(_impl_.low_){}
    , decltype(_impl_.close_){}
    , decltype(_impl_.volume_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.timestamp_sec_, &from._impl_.timestamp_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.volume_) -
    reinterpret_cast<char*>(&_impl_.timestamp_sec_)) + sizeof(_impl_.volume_));
  // @@protoc_insertion_point(copy_constructor:trader.OhlcTick)
}

inline void OhlcTick::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_sec_){int64_t{0}}
    , decltype(_impl_.open_){0}
    , decltype(_impl_.high_){0}
    , decltype(_impl_.low_){0}
    , decltype(_impl_.close_){0}
    , decltype(_impl_.volume_){0}
  };
}

OhlcTick::~OhlcTick() {
  // @@protoc_insertion_point(destructor:trader.OhlcTick)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OhlcTick::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OhlcTick::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OhlcTick::Clear() {
// @@protoc_insertion_point(message_clear_start:trader.OhlcTick)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.timestamp_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.volume_) -
        reinterpret_cast<char*>(&_impl_.timestamp_sec_)) + sizeof(_impl_.volume_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OhlcTick::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 timestamp_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp_sec(&has_bits);
          _impl_.timestamp_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float open = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_open(&has_bits);
          _impl_.open_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float high = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_high(&has_bits);
          _impl_.high_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float low = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_low(&has_bits);
          _impl_.low_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float close = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_close(&has_bits);
          _impl_.close_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float volume = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_volume(&has_bits);
          _impl_.volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OhlcTick::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trader.OhlcTick)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 timestamp_sec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp_sec(), target);
  }

  // optional float open = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_open(), target);
  }

  // optional float high = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_high(), target);
  }

  // optional float low = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_low(), target);
  }

  // optional float close = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_close(), target);
  }

  // optional float volume = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_volume(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trader.OhlcTick)
  return target;
}

size_t OhlcTick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trader.OhlcTick)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int64 timestamp_sec = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp_sec());
    }

    // optional float open = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float high = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float low = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float close = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float volume = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OhlcTick::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OhlcTick::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OhlcTick::GetClassData() const { return &_class_data_; }


void OhlcTick::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OhlcTick*>(&to_msg);
  auto& from = static_cast<const OhlcTick&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:trader.OhlcTick)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.timestamp_sec_ = from._impl_.timestamp_sec_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.open_ = from._impl_.open_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.high_ = from._impl_.high_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.low_ = from._impl_.low_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.close_ = from._impl_.close_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.volume_ = from._impl_.volume_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OhlcTick::CopyFrom(const OhlcTick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trader.OhlcTick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OhlcTick::IsInitialized() const {
  return true;
}

void OhlcTick::InternalSwap(OhlcTick* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OhlcTick, _impl_.volume_)
      + sizeof(OhlcTick::_impl_.volume_)
      - PROTOBUF_FIELD_OFFSET(OhlcTick, _impl_.timestamp_sec_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_sec_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_sec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OhlcTick::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_2fbase_2eproto_getter, &descriptor_table_base_2fbase_2eproto_once,
      file_level_metadata_base_2fbase_2eproto[1]);
}

// ===================================================================

class SideInputRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<SideInputRecord>()._impl_._has_bits_);
  static void set_has_timestamp_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SideInputRecord::SideInputRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:trader.SideInputRecord)
}
SideInputRecord::SideInputRecord(const SideInputRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SideInputRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.signal_){from._impl_.signal_}
    , decltype(_impl_.timestamp_sec_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.timestamp_sec_ = from._impl_.timestamp_sec_;
  // @@protoc_insertion_point(copy_constructor:trader.SideInputRecord)
}

inline void SideInputRecord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.signal_){arena}
    , decltype(_impl_.timestamp_sec_){int64_t{0}}
  };
}

SideInputRecord::~SideInputRecord() {
  // @@protoc_insertion_point(destructor:trader.SideInputRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SideInputRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.signal_.~RepeatedField();
}

void SideInputRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SideInputRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:trader.SideInputRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signal_.Clear();
  _impl_.timestamp_sec_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SideInputRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 timestamp_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp_sec(&has_bits);
          _impl_.timestamp_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float signal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_signal(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_signal(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SideInputRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trader.SideInputRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 timestamp_sec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp_sec(), target);
  }

  // repeated float signal = 2;
  for (int i = 0, n = this->_internal_signal_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_signal(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trader.SideInputRecord)
  return target;
}

size_t SideInputRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trader.SideInputRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float signal = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_signal_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_signal_size());
    total_size += data_size;
  }

  // optional int64 timestamp_sec = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp_sec());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SideInputRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SideInputRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SideInputRecord::GetClassData() const { return &_class_data_; }


void SideInputRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SideInputRecord*>(&to_msg);
  auto& from = static_cast<const SideInputRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:trader.SideInputRecord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.signal_.MergeFrom(from._impl_.signal_);
  if (from._internal_has_timestamp_sec()) {
    _this->_internal_set_timestamp_sec(from._internal_timestamp_sec());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SideInputRecord::CopyFrom(const SideInputRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trader.SideInputRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SideInputRecord::IsInitialized() const {
  return true;
}

void SideInputRecord::InternalSwap(SideInputRecord* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.signal_.InternalSwap(&other->_impl_.signal_);
  swap(_impl_.timestamp_sec_, other->_impl_.timestamp_sec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SideInputRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_2fbase_2eproto_getter, &descriptor_table_base_2fbase_2eproto_once,
      file_level_metadata_base_2fbase_2eproto[2]);
}

// ===================================================================

class FeeConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<FeeConfig>()._impl_._has_bits_);
  static void set_has_relative_fee(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fixed_fee(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_minimum_fee(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

FeeConfig::FeeConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:trader.FeeConfig)
}
FeeConfig::FeeConfig(const FeeConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FeeConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.relative_fee_){}
    , decltype(_impl_.fixed_fee_){}
    , decltype(_impl_.minimum_fee_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.relative_fee_, &from._impl_.relative_fee_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.minimum_fee_) -
    reinterpret_cast<char*>(&_impl_.relative_fee_)) + sizeof(_impl_.minimum_fee_));
  // @@protoc_insertion_point(copy_constructor:trader.FeeConfig)
}

inline void FeeConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.relative_fee_){0}
    , decltype(_impl_.fixed_fee_){0}
    , decltype(_impl_.minimum_fee_){0}
  };
}

FeeConfig::~FeeConfig() {
  // @@protoc_insertion_point(destructor:trader.FeeConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FeeConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FeeConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FeeConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:trader.FeeConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.relative_fee_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.minimum_fee_) -
        reinterpret_cast<char*>(&_impl_.relative_fee_)) + sizeof(_impl_.minimum_fee_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeeConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float relative_fee = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_relative_fee(&has_bits);
          _impl_.relative_fee_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float fixed_fee = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_fixed_fee(&has_bits);
          _impl_.fixed_fee_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float minimum_fee = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_minimum_fee(&has_bits);
          _impl_.minimum_fee_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FeeConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trader.FeeConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float relative_fee = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_relative_fee(), target);
  }

  // optional float fixed_fee = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_fixed_fee(), target);
  }

  // optional float minimum_fee = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_minimum_fee(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trader.FeeConfig)
  return target;
}

size_t FeeConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trader.FeeConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float relative_fee = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float fixed_fee = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float minimum_fee = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FeeConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FeeConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FeeConfig::GetClassData() const { return &_class_data_; }


void FeeConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FeeConfig*>(&to_msg);
  auto& from = static_cast<const FeeConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:trader.FeeConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.relative_fee_ = from._impl_.relative_fee_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.fixed_fee_ = from._impl_.fixed_fee_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.minimum_fee_ = from._impl_.minimum_fee_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FeeConfig::CopyFrom(const FeeConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trader.FeeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeeConfig::IsInitialized() const {
  return true;
}

void FeeConfig::InternalSwap(FeeConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FeeConfig, _impl_.minimum_fee_)
      + sizeof(FeeConfig::_impl_.minimum_fee_)
      - PROTOBUF_FIELD_OFFSET(FeeConfig, _impl_.relative_fee_)>(
          reinterpret_cast<char*>(&_impl_.relative_fee_),
          reinterpret_cast<char*>(&other->_impl_.relative_fee_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FeeConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_2fbase_2eproto_getter, &descriptor_table_base_2fbase_2eproto_once,
      file_level_metadata_base_2fbase_2eproto[3]);
}

// ===================================================================

class AccountConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<AccountConfig>()._impl_._has_bits_);
  static void set_has_start_base_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_start_quote_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_base_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_quote_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::trader::FeeConfig& market_order_fee_config(const AccountConfig* msg);
  static void set_has_market_order_fee_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::trader::FeeConfig& stop_order_fee_config(const AccountConfig* msg);
  static void set_has_stop_order_fee_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::trader::FeeConfig& limit_order_fee_config(const AccountConfig* msg);
  static void set_has_limit_order_fee_config(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_market_liquidity(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_max_volume_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::trader::FeeConfig&
AccountConfig::_Internal::market_order_fee_config(const AccountConfig* msg) {
  return *msg->_impl_.market_order_fee_config_;
}
const ::trader::FeeConfig&
AccountConfig::_Internal::stop_order_fee_config(const AccountConfig* msg) {
  return *msg->_impl_.stop_order_fee_config_;
}
const ::trader::FeeConfig&
AccountConfig::_Internal::limit_order_fee_config(const AccountConfig* msg) {
  return *msg->_impl_.limit_order_fee_config_;
}
AccountConfig::AccountConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:trader.AccountConfig)
}
AccountConfig::AccountConfig(const AccountConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AccountConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.market_order_fee_config_){nullptr}
    , decltype(_impl_.stop_order_fee_config_){nullptr}
    , decltype(_impl_.limit_order_fee_config_){nullptr}
    , decltype(_impl_.start_base_balance_){}
    , decltype(_impl_.start_quote_balance_){}
    , decltype(_impl_.base_unit_){}
    , decltype(_impl_.quote_unit_){}
    , decltype(_impl_.market_liquidity_){}
    , decltype(_impl_.max_volume_ratio_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_market_order_fee_config()) {
    _this->_impl_.market_order_fee_config_ = new ::trader::FeeConfig(*from._impl_.market_order_fee_config_);
  }
  if (from._internal_has_stop_order_fee_config()) {
    _this->_impl_.stop_order_fee_config_ = new ::trader::FeeConfig(*from._impl_.stop_order_fee_config_);
  }
  if (from._internal_has_limit_order_fee_config()) {
    _this->_impl_.limit_order_fee_config_ = new ::trader::FeeConfig(*from._impl_.limit_order_fee_config_);
  }
  ::memcpy(&_impl_.start_base_balance_, &from._impl_.start_base_balance_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_volume_ratio_) -
    reinterpret_cast<char*>(&_impl_.start_base_balance_)) + sizeof(_impl_.max_volume_ratio_));
  // @@protoc_insertion_point(copy_constructor:trader.AccountConfig)
}

inline void AccountConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.market_order_fee_config_){nullptr}
    , decltype(_impl_.stop_order_fee_config_){nullptr}
    , decltype(_impl_.limit_order_fee_config_){nullptr}
    , decltype(_impl_.start_base_balance_){0}
    , decltype(_impl_.start_quote_balance_){0}
    , decltype(_impl_.base_unit_){0}
    , decltype(_impl_.quote_unit_){0}
    , decltype(_impl_.market_liquidity_){0}
    , decltype(_impl_.max_volume_ratio_){0}
  };
}

AccountConfig::~AccountConfig() {
  // @@protoc_insertion_point(destructor:trader.AccountConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AccountConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.market_order_fee_config_;
  if (this != internal_default_instance()) delete _impl_.stop_order_fee_config_;
  if (this != internal_default_instance()) delete _impl_.limit_order_fee_config_;
}

void AccountConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AccountConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:trader.AccountConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.market_order_fee_config_ != nullptr);
      _impl_.market_order_fee_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.stop_order_fee_config_ != nullptr);
      _impl_.stop_order_fee_config_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.limit_order_fee_config_ != nullptr);
      _impl_.limit_order_fee_config_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.start_base_balance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.market_liquidity_) -
        reinterpret_cast<char*>(&_impl_.start_base_balance_)) + sizeof(_impl_.market_liquidity_));
  }
  _impl_.max_volume_ratio_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float start_base_balance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_start_base_balance(&has_bits);
          _impl_.start_base_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float start_quote_balance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_start_quote_balance(&has_bits);
          _impl_.start_quote_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float base_unit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_base_unit(&has_bits);
          _impl_.base_unit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float quote_unit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_quote_unit(&has_bits);
          _impl_.quote_unit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .trader.FeeConfig market_order_fee_config = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_market_order_fee_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .trader.FeeConfig stop_order_fee_config = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_order_fee_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .trader.FeeConfig limit_order_fee_config = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_limit_order_fee_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float market_liquidity = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_market_liquidity(&has_bits);
          _impl_.market_liquidity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float max_volume_ratio = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_max_volume_ratio(&has_bits);
          _impl_.max_volume_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AccountConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trader.AccountConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float start_base_balance = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_start_base_balance(), target);
  }

  // optional float start_quote_balance = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_start_quote_balance(), target);
  }

  // optional float base_unit = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_base_unit(), target);
  }

  // optional float quote_unit = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_quote_unit(), target);
  }

  // optional .trader.FeeConfig market_order_fee_config = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::market_order_fee_config(this),
        _Internal::market_order_fee_config(this).GetCachedSize(), target, stream);
  }

  // optional .trader.FeeConfig stop_order_fee_config = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::stop_order_fee_config(this),
        _Internal::stop_order_fee_config(this).GetCachedSize(), target, stream);
  }

  // optional .trader.FeeConfig limit_order_fee_config = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::limit_order_fee_config(this),
        _Internal::limit_order_fee_config(this).GetCachedSize(), target, stream);
  }

  // optional float market_liquidity = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_market_liquidity(), target);
  }

  // optional float max_volume_ratio = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_max_volume_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trader.AccountConfig)
  return target;
}

size_t AccountConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trader.AccountConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .trader.FeeConfig market_order_fee_config = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.market_order_fee_config_);
    }

    // optional .trader.FeeConfig stop_order_fee_config = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stop_order_fee_config_);
    }

    // optional .trader.FeeConfig limit_order_fee_config = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.limit_order_fee_config_);
    }

    // optional float start_base_balance = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float start_quote_balance = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float base_unit = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float quote_unit = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float market_liquidity = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  // optional float max_volume_ratio = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AccountConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountConfig::GetClassData() const { return &_class_data_; }


void AccountConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AccountConfig*>(&to_msg);
  auto& from = static_cast<const AccountConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:trader.AccountConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_market_order_fee_config()->::trader::FeeConfig::MergeFrom(
          from._internal_market_order_fee_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_stop_order_fee_config()->::trader::FeeConfig::MergeFrom(
          from._internal_stop_order_fee_config());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_limit_order_fee_config()->::trader::FeeConfig::MergeFrom(
          from._internal_limit_order_fee_config());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.start_base_balance_ = from._impl_.start_base_balance_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.start_quote_balance_ = from._impl_.start_quote_balance_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.base_unit_ = from._impl_.base_unit_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.quote_unit_ = from._impl_.quote_unit_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.market_liquidity_ = from._impl_.market_liquidity_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_max_volume_ratio(from._internal_max_volume_ratio());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountConfig::CopyFrom(const AccountConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trader.AccountConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountConfig::IsInitialized() const {
  return true;
}

void AccountConfig::InternalSwap(AccountConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountConfig, _impl_.max_volume_ratio_)
      + sizeof(AccountConfig::_impl_.max_volume_ratio_)
      - PROTOBUF_FIELD_OFFSET(AccountConfig, _impl_.market_order_fee_config_)>(
          reinterpret_cast<char*>(&_impl_.market_order_fee_config_),
          reinterpret_cast<char*>(&other->_impl_.market_order_fee_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_2fbase_2eproto_getter, &descriptor_table_base_2fbase_2eproto_once,
      file_level_metadata_base_2fbase_2eproto[4]);
}

// ===================================================================

class Order::_Internal {
 public:
  using HasBits = decltype(std::declval<Order>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_side(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Order::Order(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:trader.Order)
}
Order::Order(const Order& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Order* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){}
    , decltype(_impl_.side_){}
    , decltype(_impl_.price_){}
    , decltype(_impl_.oneof_amount_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.price_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.price_));
  clear_has_oneof_amount();
  switch (from.oneof_amount_case()) {
    case kBaseAmount: {
      _this->_internal_set_base_amount(from._internal_base_amount());
      break;
    }
    case kQuoteAmount: {
      _this->_internal_set_quote_amount(from._internal_quote_amount());
      break;
    }
    case ONEOF_AMOUNT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:trader.Order)
}

inline void Order::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.side_){0}
    , decltype(_impl_.price_){0}
    , decltype(_impl_.oneof_amount_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_oneof_amount();
}

Order::~Order() {
  // @@protoc_insertion_point(destructor:trader.Order)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Order::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_oneof_amount()) {
    clear_oneof_amount();
  }
}

void Order::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Order::clear_oneof_amount() {
// @@protoc_insertion_point(one_of_clear_start:trader.Order)
  switch (oneof_amount_case()) {
    case kBaseAmount: {
      // No need to clear
      break;
    }
    case kQuoteAmount: {
      // No need to clear
      break;
    }
    case ONEOF_AMOUNT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ONEOF_AMOUNT_NOT_SET;
}


void Order::Clear() {
// @@protoc_insertion_point(message_clear_start:trader.Order)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.price_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.price_));
  }
  clear_oneof_amount();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Order::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .trader.Order.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::trader::Order_Type_IsValid(val))) {
            _internal_set_type(static_cast<::trader::Order_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .trader.Order.Side side = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::trader::Order_Side_IsValid(val))) {
            _internal_set_side(static_cast<::trader::Order_Side>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // float base_amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _internal_set_base_amount(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float quote_amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _internal_set_quote_amount(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_price(&has_bits);
          _impl_.price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Order::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trader.Order)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .trader.Order.Type type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional .trader.Order.Side side = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_side(), target);
  }

  switch (oneof_amount_case()) {
    case kBaseAmount: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_base_amount(), target);
      break;
    }
    case kQuoteAmount: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_quote_amount(), target);
      break;
    }
    default: ;
  }
  // optional float price = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trader.Order)
  return target;
}

size_t Order::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trader.Order)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .trader.Order.Type type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional .trader.Order.Side side = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_side());
    }

    // optional float price = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  switch (oneof_amount_case()) {
    // float base_amount = 3;
    case kBaseAmount: {
      total_size += 1 + 4;
      break;
    }
    // float quote_amount = 4;
    case kQuoteAmount: {
      total_size += 1 + 4;
      break;
    }
    case ONEOF_AMOUNT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Order::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Order::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Order::GetClassData() const { return &_class_data_; }


void Order::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Order*>(&to_msg);
  auto& from = static_cast<const Order&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:trader.Order)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.side_ = from._impl_.side_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.price_ = from._impl_.price_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.oneof_amount_case()) {
    case kBaseAmount: {
      _this->_internal_set_base_amount(from._internal_base_amount());
      break;
    }
    case kQuoteAmount: {
      _this->_internal_set_quote_amount(from._internal_quote_amount());
      break;
    }
    case ONEOF_AMOUNT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Order::CopyFrom(const Order& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trader.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Order::IsInitialized() const {
  return true;
}

void Order::InternalSwap(Order* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Order, _impl_.price_)
      + sizeof(Order::_impl_.price_)
      - PROTOBUF_FIELD_OFFSET(Order, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
  swap(_impl_.oneof_amount_, other->_impl_.oneof_amount_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Order::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_2fbase_2eproto_getter, &descriptor_table_base_2fbase_2eproto_once,
      file_level_metadata_base_2fbase_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace trader
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::trader::PriceRecord*
Arena::CreateMaybeMessage< ::trader::PriceRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trader::PriceRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::trader::OhlcTick*
Arena::CreateMaybeMessage< ::trader::OhlcTick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trader::OhlcTick >(arena);
}
template<> PROTOBUF_NOINLINE ::trader::SideInputRecord*
Arena::CreateMaybeMessage< ::trader::SideInputRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trader::SideInputRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::trader::FeeConfig*
Arena::CreateMaybeMessage< ::trader::FeeConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trader::FeeConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::trader::AccountConfig*
Arena::CreateMaybeMessage< ::trader::AccountConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trader::AccountConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::trader::Order*
Arena::CreateMaybeMessage< ::trader::Order >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trader::Order >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
