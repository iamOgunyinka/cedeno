// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base/base.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_base_2fbase_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_base_2fbase_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_base_2fbase_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_base_2fbase_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_base_2fbase_2eproto;
namespace trader {
class AccountConfig;
struct AccountConfigDefaultTypeInternal;
extern AccountConfigDefaultTypeInternal _AccountConfig_default_instance_;
class FeeConfig;
struct FeeConfigDefaultTypeInternal;
extern FeeConfigDefaultTypeInternal _FeeConfig_default_instance_;
class OhlcTick;
struct OhlcTickDefaultTypeInternal;
extern OhlcTickDefaultTypeInternal _OhlcTick_default_instance_;
class Order;
struct OrderDefaultTypeInternal;
extern OrderDefaultTypeInternal _Order_default_instance_;
class PriceRecord;
struct PriceRecordDefaultTypeInternal;
extern PriceRecordDefaultTypeInternal _PriceRecord_default_instance_;
class SideInputRecord;
struct SideInputRecordDefaultTypeInternal;
extern SideInputRecordDefaultTypeInternal _SideInputRecord_default_instance_;
}  // namespace trader
PROTOBUF_NAMESPACE_OPEN
template<> ::trader::AccountConfig* Arena::CreateMaybeMessage<::trader::AccountConfig>(Arena*);
template<> ::trader::FeeConfig* Arena::CreateMaybeMessage<::trader::FeeConfig>(Arena*);
template<> ::trader::OhlcTick* Arena::CreateMaybeMessage<::trader::OhlcTick>(Arena*);
template<> ::trader::Order* Arena::CreateMaybeMessage<::trader::Order>(Arena*);
template<> ::trader::PriceRecord* Arena::CreateMaybeMessage<::trader::PriceRecord>(Arena*);
template<> ::trader::SideInputRecord* Arena::CreateMaybeMessage<::trader::SideInputRecord>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace trader {

enum Order_Type : int {
  Order_Type_MARKET = 0,
  Order_Type_STOP = 1,
  Order_Type_LIMIT = 2
};
bool Order_Type_IsValid(int value);
constexpr Order_Type Order_Type_Type_MIN = Order_Type_MARKET;
constexpr Order_Type Order_Type_Type_MAX = Order_Type_LIMIT;
constexpr int Order_Type_Type_ARRAYSIZE = Order_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Order_Type_descriptor();
template<typename T>
inline const std::string& Order_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Order_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Order_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Order_Type_descriptor(), enum_t_value);
}
inline bool Order_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Order_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Order_Type>(
    Order_Type_descriptor(), name, value);
}
enum Order_Side : int {
  Order_Side_BUY = 0,
  Order_Side_SELL = 1
};
bool Order_Side_IsValid(int value);
constexpr Order_Side Order_Side_Side_MIN = Order_Side_BUY;
constexpr Order_Side Order_Side_Side_MAX = Order_Side_SELL;
constexpr int Order_Side_Side_ARRAYSIZE = Order_Side_Side_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Order_Side_descriptor();
template<typename T>
inline const std::string& Order_Side_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Order_Side>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Order_Side_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Order_Side_descriptor(), enum_t_value);
}
inline bool Order_Side_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Order_Side* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Order_Side>(
    Order_Side_descriptor(), name, value);
}
// ===================================================================

class PriceRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trader.PriceRecord) */ {
 public:
  inline PriceRecord() : PriceRecord(nullptr) {}
  ~PriceRecord() override;
  explicit PROTOBUF_CONSTEXPR PriceRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PriceRecord(const PriceRecord& from);
  PriceRecord(PriceRecord&& from) noexcept
    : PriceRecord() {
    *this = ::std::move(from);
  }

  inline PriceRecord& operator=(const PriceRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline PriceRecord& operator=(PriceRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PriceRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const PriceRecord* internal_default_instance() {
    return reinterpret_cast<const PriceRecord*>(
               &_PriceRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PriceRecord& a, PriceRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(PriceRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PriceRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PriceRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PriceRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PriceRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PriceRecord& from) {
    PriceRecord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PriceRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trader.PriceRecord";
  }
  protected:
  explicit PriceRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampSecFieldNumber = 1,
    kPriceFieldNumber = 2,
    kVolumeFieldNumber = 3,
  };
  // optional int64 timestamp_sec = 1;
  bool has_timestamp_sec() const;
  private:
  bool _internal_has_timestamp_sec() const;
  public:
  void clear_timestamp_sec();
  int64_t timestamp_sec() const;
  void set_timestamp_sec(int64_t value);
  private:
  int64_t _internal_timestamp_sec() const;
  void _internal_set_timestamp_sec(int64_t value);
  public:

  // optional float price = 2;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  float price() const;
  void set_price(float value);
  private:
  float _internal_price() const;
  void _internal_set_price(float value);
  public:

  // optional float volume = 3;
  bool has_volume() const;
  private:
  bool _internal_has_volume() const;
  public:
  void clear_volume();
  float volume() const;
  void set_volume(float value);
  private:
  float _internal_volume() const;
  void _internal_set_volume(float value);
  public:

  // @@protoc_insertion_point(class_scope:trader.PriceRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int64_t timestamp_sec_;
    float price_;
    float volume_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_2fbase_2eproto;
};
// -------------------------------------------------------------------

class OhlcTick final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trader.OhlcTick) */ {
 public:
  inline OhlcTick() : OhlcTick(nullptr) {}
  ~OhlcTick() override;
  explicit PROTOBUF_CONSTEXPR OhlcTick(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OhlcTick(const OhlcTick& from);
  OhlcTick(OhlcTick&& from) noexcept
    : OhlcTick() {
    *this = ::std::move(from);
  }

  inline OhlcTick& operator=(const OhlcTick& from) {
    CopyFrom(from);
    return *this;
  }
  inline OhlcTick& operator=(OhlcTick&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OhlcTick& default_instance() {
    return *internal_default_instance();
  }
  static inline const OhlcTick* internal_default_instance() {
    return reinterpret_cast<const OhlcTick*>(
               &_OhlcTick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OhlcTick& a, OhlcTick& b) {
    a.Swap(&b);
  }
  inline void Swap(OhlcTick* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OhlcTick* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OhlcTick* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OhlcTick>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OhlcTick& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OhlcTick& from) {
    OhlcTick::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OhlcTick* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trader.OhlcTick";
  }
  protected:
  explicit OhlcTick(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampSecFieldNumber = 1,
    kOpenFieldNumber = 2,
    kHighFieldNumber = 3,
    kLowFieldNumber = 4,
    kCloseFieldNumber = 5,
    kVolumeFieldNumber = 6,
  };
  // optional int64 timestamp_sec = 1;
  bool has_timestamp_sec() const;
  private:
  bool _internal_has_timestamp_sec() const;
  public:
  void clear_timestamp_sec();
  int64_t timestamp_sec() const;
  void set_timestamp_sec(int64_t value);
  private:
  int64_t _internal_timestamp_sec() const;
  void _internal_set_timestamp_sec(int64_t value);
  public:

  // optional float open = 2;
  bool has_open() const;
  private:
  bool _internal_has_open() const;
  public:
  void clear_open();
  float open() const;
  void set_open(float value);
  private:
  float _internal_open() const;
  void _internal_set_open(float value);
  public:

  // optional float high = 3;
  bool has_high() const;
  private:
  bool _internal_has_high() const;
  public:
  void clear_high();
  float high() const;
  void set_high(float value);
  private:
  float _internal_high() const;
  void _internal_set_high(float value);
  public:

  // optional float low = 4;
  bool has_low() const;
  private:
  bool _internal_has_low() const;
  public:
  void clear_low();
  float low() const;
  void set_low(float value);
  private:
  float _internal_low() const;
  void _internal_set_low(float value);
  public:

  // optional float close = 5;
  bool has_close() const;
  private:
  bool _internal_has_close() const;
  public:
  void clear_close();
  float close() const;
  void set_close(float value);
  private:
  float _internal_close() const;
  void _internal_set_close(float value);
  public:

  // optional float volume = 6;
  bool has_volume() const;
  private:
  bool _internal_has_volume() const;
  public:
  void clear_volume();
  float volume() const;
  void set_volume(float value);
  private:
  float _internal_volume() const;
  void _internal_set_volume(float value);
  public:

  // @@protoc_insertion_point(class_scope:trader.OhlcTick)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int64_t timestamp_sec_;
    float open_;
    float high_;
    float low_;
    float close_;
    float volume_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_2fbase_2eproto;
};
// -------------------------------------------------------------------

class SideInputRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trader.SideInputRecord) */ {
 public:
  inline SideInputRecord() : SideInputRecord(nullptr) {}
  ~SideInputRecord() override;
  explicit PROTOBUF_CONSTEXPR SideInputRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SideInputRecord(const SideInputRecord& from);
  SideInputRecord(SideInputRecord&& from) noexcept
    : SideInputRecord() {
    *this = ::std::move(from);
  }

  inline SideInputRecord& operator=(const SideInputRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline SideInputRecord& operator=(SideInputRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SideInputRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const SideInputRecord* internal_default_instance() {
    return reinterpret_cast<const SideInputRecord*>(
               &_SideInputRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SideInputRecord& a, SideInputRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(SideInputRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SideInputRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SideInputRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SideInputRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SideInputRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SideInputRecord& from) {
    SideInputRecord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SideInputRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trader.SideInputRecord";
  }
  protected:
  explicit SideInputRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignalFieldNumber = 2,
    kTimestampSecFieldNumber = 1,
  };
  // repeated float signal = 2;
  int signal_size() const;
  private:
  int _internal_signal_size() const;
  public:
  void clear_signal();
  private:
  float _internal_signal(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_signal() const;
  void _internal_add_signal(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_signal();
  public:
  float signal(int index) const;
  void set_signal(int index, float value);
  void add_signal(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      signal() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_signal();

  // optional int64 timestamp_sec = 1;
  bool has_timestamp_sec() const;
  private:
  bool _internal_has_timestamp_sec() const;
  public:
  void clear_timestamp_sec();
  int64_t timestamp_sec() const;
  void set_timestamp_sec(int64_t value);
  private:
  int64_t _internal_timestamp_sec() const;
  void _internal_set_timestamp_sec(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:trader.SideInputRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > signal_;
    int64_t timestamp_sec_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_2fbase_2eproto;
};
// -------------------------------------------------------------------

class FeeConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trader.FeeConfig) */ {
 public:
  inline FeeConfig() : FeeConfig(nullptr) {}
  ~FeeConfig() override;
  explicit PROTOBUF_CONSTEXPR FeeConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FeeConfig(const FeeConfig& from);
  FeeConfig(FeeConfig&& from) noexcept
    : FeeConfig() {
    *this = ::std::move(from);
  }

  inline FeeConfig& operator=(const FeeConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeeConfig& operator=(FeeConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FeeConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const FeeConfig* internal_default_instance() {
    return reinterpret_cast<const FeeConfig*>(
               &_FeeConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FeeConfig& a, FeeConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(FeeConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeeConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FeeConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FeeConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FeeConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FeeConfig& from) {
    FeeConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeeConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trader.FeeConfig";
  }
  protected:
  explicit FeeConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelativeFeeFieldNumber = 1,
    kFixedFeeFieldNumber = 2,
    kMinimumFeeFieldNumber = 3,
  };
  // optional float relative_fee = 1;
  bool has_relative_fee() const;
  private:
  bool _internal_has_relative_fee() const;
  public:
  void clear_relative_fee();
  float relative_fee() const;
  void set_relative_fee(float value);
  private:
  float _internal_relative_fee() const;
  void _internal_set_relative_fee(float value);
  public:

  // optional float fixed_fee = 2;
  bool has_fixed_fee() const;
  private:
  bool _internal_has_fixed_fee() const;
  public:
  void clear_fixed_fee();
  float fixed_fee() const;
  void set_fixed_fee(float value);
  private:
  float _internal_fixed_fee() const;
  void _internal_set_fixed_fee(float value);
  public:

  // optional float minimum_fee = 3;
  bool has_minimum_fee() const;
  private:
  bool _internal_has_minimum_fee() const;
  public:
  void clear_minimum_fee();
  float minimum_fee() const;
  void set_minimum_fee(float value);
  private:
  float _internal_minimum_fee() const;
  void _internal_set_minimum_fee(float value);
  public:

  // @@protoc_insertion_point(class_scope:trader.FeeConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float relative_fee_;
    float fixed_fee_;
    float minimum_fee_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_2fbase_2eproto;
};
// -------------------------------------------------------------------

class AccountConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trader.AccountConfig) */ {
 public:
  inline AccountConfig() : AccountConfig(nullptr) {}
  ~AccountConfig() override;
  explicit PROTOBUF_CONSTEXPR AccountConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountConfig(const AccountConfig& from);
  AccountConfig(AccountConfig&& from) noexcept
    : AccountConfig() {
    *this = ::std::move(from);
  }

  inline AccountConfig& operator=(const AccountConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountConfig& operator=(AccountConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountConfig* internal_default_instance() {
    return reinterpret_cast<const AccountConfig*>(
               &_AccountConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AccountConfig& a, AccountConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccountConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccountConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccountConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AccountConfig& from) {
    AccountConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trader.AccountConfig";
  }
  protected:
  explicit AccountConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketOrderFeeConfigFieldNumber = 5,
    kStopOrderFeeConfigFieldNumber = 6,
    kLimitOrderFeeConfigFieldNumber = 7,
    kStartBaseBalanceFieldNumber = 1,
    kStartQuoteBalanceFieldNumber = 2,
    kBaseUnitFieldNumber = 3,
    kQuoteUnitFieldNumber = 4,
    kMarketLiquidityFieldNumber = 8,
    kMaxVolumeRatioFieldNumber = 9,
  };
  // optional .trader.FeeConfig market_order_fee_config = 5;
  bool has_market_order_fee_config() const;
  private:
  bool _internal_has_market_order_fee_config() const;
  public:
  void clear_market_order_fee_config();
  const ::trader::FeeConfig& market_order_fee_config() const;
  PROTOBUF_NODISCARD ::trader::FeeConfig* release_market_order_fee_config();
  ::trader::FeeConfig* mutable_market_order_fee_config();
  void set_allocated_market_order_fee_config(::trader::FeeConfig* market_order_fee_config);
  private:
  const ::trader::FeeConfig& _internal_market_order_fee_config() const;
  ::trader::FeeConfig* _internal_mutable_market_order_fee_config();
  public:
  void unsafe_arena_set_allocated_market_order_fee_config(
      ::trader::FeeConfig* market_order_fee_config);
  ::trader::FeeConfig* unsafe_arena_release_market_order_fee_config();

  // optional .trader.FeeConfig stop_order_fee_config = 6;
  bool has_stop_order_fee_config() const;
  private:
  bool _internal_has_stop_order_fee_config() const;
  public:
  void clear_stop_order_fee_config();
  const ::trader::FeeConfig& stop_order_fee_config() const;
  PROTOBUF_NODISCARD ::trader::FeeConfig* release_stop_order_fee_config();
  ::trader::FeeConfig* mutable_stop_order_fee_config();
  void set_allocated_stop_order_fee_config(::trader::FeeConfig* stop_order_fee_config);
  private:
  const ::trader::FeeConfig& _internal_stop_order_fee_config() const;
  ::trader::FeeConfig* _internal_mutable_stop_order_fee_config();
  public:
  void unsafe_arena_set_allocated_stop_order_fee_config(
      ::trader::FeeConfig* stop_order_fee_config);
  ::trader::FeeConfig* unsafe_arena_release_stop_order_fee_config();

  // optional .trader.FeeConfig limit_order_fee_config = 7;
  bool has_limit_order_fee_config() const;
  private:
  bool _internal_has_limit_order_fee_config() const;
  public:
  void clear_limit_order_fee_config();
  const ::trader::FeeConfig& limit_order_fee_config() const;
  PROTOBUF_NODISCARD ::trader::FeeConfig* release_limit_order_fee_config();
  ::trader::FeeConfig* mutable_limit_order_fee_config();
  void set_allocated_limit_order_fee_config(::trader::FeeConfig* limit_order_fee_config);
  private:
  const ::trader::FeeConfig& _internal_limit_order_fee_config() const;
  ::trader::FeeConfig* _internal_mutable_limit_order_fee_config();
  public:
  void unsafe_arena_set_allocated_limit_order_fee_config(
      ::trader::FeeConfig* limit_order_fee_config);
  ::trader::FeeConfig* unsafe_arena_release_limit_order_fee_config();

  // optional float start_base_balance = 1;
  bool has_start_base_balance() const;
  private:
  bool _internal_has_start_base_balance() const;
  public:
  void clear_start_base_balance();
  float start_base_balance() const;
  void set_start_base_balance(float value);
  private:
  float _internal_start_base_balance() const;
  void _internal_set_start_base_balance(float value);
  public:

  // optional float start_quote_balance = 2;
  bool has_start_quote_balance() const;
  private:
  bool _internal_has_start_quote_balance() const;
  public:
  void clear_start_quote_balance();
  float start_quote_balance() const;
  void set_start_quote_balance(float value);
  private:
  float _internal_start_quote_balance() const;
  void _internal_set_start_quote_balance(float value);
  public:

  // optional float base_unit = 3;
  bool has_base_unit() const;
  private:
  bool _internal_has_base_unit() const;
  public:
  void clear_base_unit();
  float base_unit() const;
  void set_base_unit(float value);
  private:
  float _internal_base_unit() const;
  void _internal_set_base_unit(float value);
  public:

  // optional float quote_unit = 4;
  bool has_quote_unit() const;
  private:
  bool _internal_has_quote_unit() const;
  public:
  void clear_quote_unit();
  float quote_unit() const;
  void set_quote_unit(float value);
  private:
  float _internal_quote_unit() const;
  void _internal_set_quote_unit(float value);
  public:

  // optional float market_liquidity = 8;
  bool has_market_liquidity() const;
  private:
  bool _internal_has_market_liquidity() const;
  public:
  void clear_market_liquidity();
  float market_liquidity() const;
  void set_market_liquidity(float value);
  private:
  float _internal_market_liquidity() const;
  void _internal_set_market_liquidity(float value);
  public:

  // optional float max_volume_ratio = 9;
  bool has_max_volume_ratio() const;
  private:
  bool _internal_has_max_volume_ratio() const;
  public:
  void clear_max_volume_ratio();
  float max_volume_ratio() const;
  void set_max_volume_ratio(float value);
  private:
  float _internal_max_volume_ratio() const;
  void _internal_set_max_volume_ratio(float value);
  public:

  // @@protoc_insertion_point(class_scope:trader.AccountConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::trader::FeeConfig* market_order_fee_config_;
    ::trader::FeeConfig* stop_order_fee_config_;
    ::trader::FeeConfig* limit_order_fee_config_;
    float start_base_balance_;
    float start_quote_balance_;
    float base_unit_;
    float quote_unit_;
    float market_liquidity_;
    float max_volume_ratio_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_2fbase_2eproto;
};
// -------------------------------------------------------------------

class Order final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trader.Order) */ {
 public:
  inline Order() : Order(nullptr) {}
  ~Order() override;
  explicit PROTOBUF_CONSTEXPR Order(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Order(const Order& from);
  Order(Order&& from) noexcept
    : Order() {
    *this = ::std::move(from);
  }

  inline Order& operator=(const Order& from) {
    CopyFrom(from);
    return *this;
  }
  inline Order& operator=(Order&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Order& default_instance() {
    return *internal_default_instance();
  }
  enum OneofAmountCase {
    kBaseAmount = 3,
    kQuoteAmount = 4,
    ONEOF_AMOUNT_NOT_SET = 0,
  };

  static inline const Order* internal_default_instance() {
    return reinterpret_cast<const Order*>(
               &_Order_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Order& a, Order& b) {
    a.Swap(&b);
  }
  inline void Swap(Order* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Order* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Order* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Order>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Order& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Order& from) {
    Order::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Order* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trader.Order";
  }
  protected:
  explicit Order(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Order_Type Type;
  static constexpr Type MARKET =
    Order_Type_MARKET;
  static constexpr Type STOP =
    Order_Type_STOP;
  static constexpr Type LIMIT =
    Order_Type_LIMIT;
  static inline bool Type_IsValid(int value) {
    return Order_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Order_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Order_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Order_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Order_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Order_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Order_Type_Parse(name, value);
  }

  typedef Order_Side Side;
  static constexpr Side BUY =
    Order_Side_BUY;
  static constexpr Side SELL =
    Order_Side_SELL;
  static inline bool Side_IsValid(int value) {
    return Order_Side_IsValid(value);
  }
  static constexpr Side Side_MIN =
    Order_Side_Side_MIN;
  static constexpr Side Side_MAX =
    Order_Side_Side_MAX;
  static constexpr int Side_ARRAYSIZE =
    Order_Side_Side_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Side_descriptor() {
    return Order_Side_descriptor();
  }
  template<typename T>
  static inline const std::string& Side_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Side>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Side_Name.");
    return Order_Side_Name(enum_t_value);
  }
  static inline bool Side_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Side* value) {
    return Order_Side_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kSideFieldNumber = 2,
    kPriceFieldNumber = 5,
    kBaseAmountFieldNumber = 3,
    kQuoteAmountFieldNumber = 4,
  };
  // optional .trader.Order.Type type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::trader::Order_Type type() const;
  void set_type(::trader::Order_Type value);
  private:
  ::trader::Order_Type _internal_type() const;
  void _internal_set_type(::trader::Order_Type value);
  public:

  // optional .trader.Order.Side side = 2;
  bool has_side() const;
  private:
  bool _internal_has_side() const;
  public:
  void clear_side();
  ::trader::Order_Side side() const;
  void set_side(::trader::Order_Side value);
  private:
  ::trader::Order_Side _internal_side() const;
  void _internal_set_side(::trader::Order_Side value);
  public:

  // optional float price = 5;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  float price() const;
  void set_price(float value);
  private:
  float _internal_price() const;
  void _internal_set_price(float value);
  public:

  // float base_amount = 3;
  bool has_base_amount() const;
  private:
  bool _internal_has_base_amount() const;
  public:
  void clear_base_amount();
  float base_amount() const;
  void set_base_amount(float value);
  private:
  float _internal_base_amount() const;
  void _internal_set_base_amount(float value);
  public:

  // float quote_amount = 4;
  bool has_quote_amount() const;
  private:
  bool _internal_has_quote_amount() const;
  public:
  void clear_quote_amount();
  float quote_amount() const;
  void set_quote_amount(float value);
  private:
  float _internal_quote_amount() const;
  void _internal_set_quote_amount(float value);
  public:

  void clear_oneof_amount();
  OneofAmountCase oneof_amount_case() const;
  // @@protoc_insertion_point(class_scope:trader.Order)
 private:
  class _Internal;
  void set_has_base_amount();
  void set_has_quote_amount();

  inline bool has_oneof_amount() const;
  inline void clear_has_oneof_amount();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int type_;
    int side_;
    float price_;
    union OneofAmountUnion {
      constexpr OneofAmountUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      float base_amount_;
      float quote_amount_;
    } oneof_amount_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_2fbase_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PriceRecord

// optional int64 timestamp_sec = 1;
inline bool PriceRecord::_internal_has_timestamp_sec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PriceRecord::has_timestamp_sec() const {
  return _internal_has_timestamp_sec();
}
inline void PriceRecord::clear_timestamp_sec() {
  _impl_.timestamp_sec_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t PriceRecord::_internal_timestamp_sec() const {
  return _impl_.timestamp_sec_;
}
inline int64_t PriceRecord::timestamp_sec() const {
  // @@protoc_insertion_point(field_get:trader.PriceRecord.timestamp_sec)
  return _internal_timestamp_sec();
}
inline void PriceRecord::_internal_set_timestamp_sec(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.timestamp_sec_ = value;
}
inline void PriceRecord::set_timestamp_sec(int64_t value) {
  _internal_set_timestamp_sec(value);
  // @@protoc_insertion_point(field_set:trader.PriceRecord.timestamp_sec)
}

// optional float price = 2;
inline bool PriceRecord::_internal_has_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PriceRecord::has_price() const {
  return _internal_has_price();
}
inline void PriceRecord::clear_price() {
  _impl_.price_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float PriceRecord::_internal_price() const {
  return _impl_.price_;
}
inline float PriceRecord::price() const {
  // @@protoc_insertion_point(field_get:trader.PriceRecord.price)
  return _internal_price();
}
inline void PriceRecord::_internal_set_price(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.price_ = value;
}
inline void PriceRecord::set_price(float value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:trader.PriceRecord.price)
}

// optional float volume = 3;
inline bool PriceRecord::_internal_has_volume() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PriceRecord::has_volume() const {
  return _internal_has_volume();
}
inline void PriceRecord::clear_volume() {
  _impl_.volume_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float PriceRecord::_internal_volume() const {
  return _impl_.volume_;
}
inline float PriceRecord::volume() const {
  // @@protoc_insertion_point(field_get:trader.PriceRecord.volume)
  return _internal_volume();
}
inline void PriceRecord::_internal_set_volume(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.volume_ = value;
}
inline void PriceRecord::set_volume(float value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:trader.PriceRecord.volume)
}

// -------------------------------------------------------------------

// OhlcTick

// optional int64 timestamp_sec = 1;
inline bool OhlcTick::_internal_has_timestamp_sec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OhlcTick::has_timestamp_sec() const {
  return _internal_has_timestamp_sec();
}
inline void OhlcTick::clear_timestamp_sec() {
  _impl_.timestamp_sec_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t OhlcTick::_internal_timestamp_sec() const {
  return _impl_.timestamp_sec_;
}
inline int64_t OhlcTick::timestamp_sec() const {
  // @@protoc_insertion_point(field_get:trader.OhlcTick.timestamp_sec)
  return _internal_timestamp_sec();
}
inline void OhlcTick::_internal_set_timestamp_sec(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.timestamp_sec_ = value;
}
inline void OhlcTick::set_timestamp_sec(int64_t value) {
  _internal_set_timestamp_sec(value);
  // @@protoc_insertion_point(field_set:trader.OhlcTick.timestamp_sec)
}

// optional float open = 2;
inline bool OhlcTick::_internal_has_open() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OhlcTick::has_open() const {
  return _internal_has_open();
}
inline void OhlcTick::clear_open() {
  _impl_.open_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float OhlcTick::_internal_open() const {
  return _impl_.open_;
}
inline float OhlcTick::open() const {
  // @@protoc_insertion_point(field_get:trader.OhlcTick.open)
  return _internal_open();
}
inline void OhlcTick::_internal_set_open(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.open_ = value;
}
inline void OhlcTick::set_open(float value) {
  _internal_set_open(value);
  // @@protoc_insertion_point(field_set:trader.OhlcTick.open)
}

// optional float high = 3;
inline bool OhlcTick::_internal_has_high() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OhlcTick::has_high() const {
  return _internal_has_high();
}
inline void OhlcTick::clear_high() {
  _impl_.high_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float OhlcTick::_internal_high() const {
  return _impl_.high_;
}
inline float OhlcTick::high() const {
  // @@protoc_insertion_point(field_get:trader.OhlcTick.high)
  return _internal_high();
}
inline void OhlcTick::_internal_set_high(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.high_ = value;
}
inline void OhlcTick::set_high(float value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:trader.OhlcTick.high)
}

// optional float low = 4;
inline bool OhlcTick::_internal_has_low() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool OhlcTick::has_low() const {
  return _internal_has_low();
}
inline void OhlcTick::clear_low() {
  _impl_.low_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float OhlcTick::_internal_low() const {
  return _impl_.low_;
}
inline float OhlcTick::low() const {
  // @@protoc_insertion_point(field_get:trader.OhlcTick.low)
  return _internal_low();
}
inline void OhlcTick::_internal_set_low(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.low_ = value;
}
inline void OhlcTick::set_low(float value) {
  _internal_set_low(value);
  // @@protoc_insertion_point(field_set:trader.OhlcTick.low)
}

// optional float close = 5;
inline bool OhlcTick::_internal_has_close() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool OhlcTick::has_close() const {
  return _internal_has_close();
}
inline void OhlcTick::clear_close() {
  _impl_.close_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float OhlcTick::_internal_close() const {
  return _impl_.close_;
}
inline float OhlcTick::close() const {
  // @@protoc_insertion_point(field_get:trader.OhlcTick.close)
  return _internal_close();
}
inline void OhlcTick::_internal_set_close(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.close_ = value;
}
inline void OhlcTick::set_close(float value) {
  _internal_set_close(value);
  // @@protoc_insertion_point(field_set:trader.OhlcTick.close)
}

// optional float volume = 6;
inline bool OhlcTick::_internal_has_volume() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool OhlcTick::has_volume() const {
  return _internal_has_volume();
}
inline void OhlcTick::clear_volume() {
  _impl_.volume_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float OhlcTick::_internal_volume() const {
  return _impl_.volume_;
}
inline float OhlcTick::volume() const {
  // @@protoc_insertion_point(field_get:trader.OhlcTick.volume)
  return _internal_volume();
}
inline void OhlcTick::_internal_set_volume(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.volume_ = value;
}
inline void OhlcTick::set_volume(float value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:trader.OhlcTick.volume)
}

// -------------------------------------------------------------------

// SideInputRecord

// optional int64 timestamp_sec = 1;
inline bool SideInputRecord::_internal_has_timestamp_sec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SideInputRecord::has_timestamp_sec() const {
  return _internal_has_timestamp_sec();
}
inline void SideInputRecord::clear_timestamp_sec() {
  _impl_.timestamp_sec_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t SideInputRecord::_internal_timestamp_sec() const {
  return _impl_.timestamp_sec_;
}
inline int64_t SideInputRecord::timestamp_sec() const {
  // @@protoc_insertion_point(field_get:trader.SideInputRecord.timestamp_sec)
  return _internal_timestamp_sec();
}
inline void SideInputRecord::_internal_set_timestamp_sec(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.timestamp_sec_ = value;
}
inline void SideInputRecord::set_timestamp_sec(int64_t value) {
  _internal_set_timestamp_sec(value);
  // @@protoc_insertion_point(field_set:trader.SideInputRecord.timestamp_sec)
}

// repeated float signal = 2;
inline int SideInputRecord::_internal_signal_size() const {
  return _impl_.signal_.size();
}
inline int SideInputRecord::signal_size() const {
  return _internal_signal_size();
}
inline void SideInputRecord::clear_signal() {
  _impl_.signal_.Clear();
}
inline float SideInputRecord::_internal_signal(int index) const {
  return _impl_.signal_.Get(index);
}
inline float SideInputRecord::signal(int index) const {
  // @@protoc_insertion_point(field_get:trader.SideInputRecord.signal)
  return _internal_signal(index);
}
inline void SideInputRecord::set_signal(int index, float value) {
  _impl_.signal_.Set(index, value);
  // @@protoc_insertion_point(field_set:trader.SideInputRecord.signal)
}
inline void SideInputRecord::_internal_add_signal(float value) {
  _impl_.signal_.Add(value);
}
inline void SideInputRecord::add_signal(float value) {
  _internal_add_signal(value);
  // @@protoc_insertion_point(field_add:trader.SideInputRecord.signal)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SideInputRecord::_internal_signal() const {
  return _impl_.signal_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SideInputRecord::signal() const {
  // @@protoc_insertion_point(field_list:trader.SideInputRecord.signal)
  return _internal_signal();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SideInputRecord::_internal_mutable_signal() {
  return &_impl_.signal_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SideInputRecord::mutable_signal() {
  // @@protoc_insertion_point(field_mutable_list:trader.SideInputRecord.signal)
  return _internal_mutable_signal();
}

// -------------------------------------------------------------------

// FeeConfig

// optional float relative_fee = 1;
inline bool FeeConfig::_internal_has_relative_fee() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FeeConfig::has_relative_fee() const {
  return _internal_has_relative_fee();
}
inline void FeeConfig::clear_relative_fee() {
  _impl_.relative_fee_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float FeeConfig::_internal_relative_fee() const {
  return _impl_.relative_fee_;
}
inline float FeeConfig::relative_fee() const {
  // @@protoc_insertion_point(field_get:trader.FeeConfig.relative_fee)
  return _internal_relative_fee();
}
inline void FeeConfig::_internal_set_relative_fee(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.relative_fee_ = value;
}
inline void FeeConfig::set_relative_fee(float value) {
  _internal_set_relative_fee(value);
  // @@protoc_insertion_point(field_set:trader.FeeConfig.relative_fee)
}

// optional float fixed_fee = 2;
inline bool FeeConfig::_internal_has_fixed_fee() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FeeConfig::has_fixed_fee() const {
  return _internal_has_fixed_fee();
}
inline void FeeConfig::clear_fixed_fee() {
  _impl_.fixed_fee_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float FeeConfig::_internal_fixed_fee() const {
  return _impl_.fixed_fee_;
}
inline float FeeConfig::fixed_fee() const {
  // @@protoc_insertion_point(field_get:trader.FeeConfig.fixed_fee)
  return _internal_fixed_fee();
}
inline void FeeConfig::_internal_set_fixed_fee(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.fixed_fee_ = value;
}
inline void FeeConfig::set_fixed_fee(float value) {
  _internal_set_fixed_fee(value);
  // @@protoc_insertion_point(field_set:trader.FeeConfig.fixed_fee)
}

// optional float minimum_fee = 3;
inline bool FeeConfig::_internal_has_minimum_fee() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FeeConfig::has_minimum_fee() const {
  return _internal_has_minimum_fee();
}
inline void FeeConfig::clear_minimum_fee() {
  _impl_.minimum_fee_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float FeeConfig::_internal_minimum_fee() const {
  return _impl_.minimum_fee_;
}
inline float FeeConfig::minimum_fee() const {
  // @@protoc_insertion_point(field_get:trader.FeeConfig.minimum_fee)
  return _internal_minimum_fee();
}
inline void FeeConfig::_internal_set_minimum_fee(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.minimum_fee_ = value;
}
inline void FeeConfig::set_minimum_fee(float value) {
  _internal_set_minimum_fee(value);
  // @@protoc_insertion_point(field_set:trader.FeeConfig.minimum_fee)
}

// -------------------------------------------------------------------

// AccountConfig

// optional float start_base_balance = 1;
inline bool AccountConfig::_internal_has_start_base_balance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AccountConfig::has_start_base_balance() const {
  return _internal_has_start_base_balance();
}
inline void AccountConfig::clear_start_base_balance() {
  _impl_.start_base_balance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float AccountConfig::_internal_start_base_balance() const {
  return _impl_.start_base_balance_;
}
inline float AccountConfig::start_base_balance() const {
  // @@protoc_insertion_point(field_get:trader.AccountConfig.start_base_balance)
  return _internal_start_base_balance();
}
inline void AccountConfig::_internal_set_start_base_balance(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.start_base_balance_ = value;
}
inline void AccountConfig::set_start_base_balance(float value) {
  _internal_set_start_base_balance(value);
  // @@protoc_insertion_point(field_set:trader.AccountConfig.start_base_balance)
}

// optional float start_quote_balance = 2;
inline bool AccountConfig::_internal_has_start_quote_balance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AccountConfig::has_start_quote_balance() const {
  return _internal_has_start_quote_balance();
}
inline void AccountConfig::clear_start_quote_balance() {
  _impl_.start_quote_balance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float AccountConfig::_internal_start_quote_balance() const {
  return _impl_.start_quote_balance_;
}
inline float AccountConfig::start_quote_balance() const {
  // @@protoc_insertion_point(field_get:trader.AccountConfig.start_quote_balance)
  return _internal_start_quote_balance();
}
inline void AccountConfig::_internal_set_start_quote_balance(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.start_quote_balance_ = value;
}
inline void AccountConfig::set_start_quote_balance(float value) {
  _internal_set_start_quote_balance(value);
  // @@protoc_insertion_point(field_set:trader.AccountConfig.start_quote_balance)
}

// optional float base_unit = 3;
inline bool AccountConfig::_internal_has_base_unit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AccountConfig::has_base_unit() const {
  return _internal_has_base_unit();
}
inline void AccountConfig::clear_base_unit() {
  _impl_.base_unit_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float AccountConfig::_internal_base_unit() const {
  return _impl_.base_unit_;
}
inline float AccountConfig::base_unit() const {
  // @@protoc_insertion_point(field_get:trader.AccountConfig.base_unit)
  return _internal_base_unit();
}
inline void AccountConfig::_internal_set_base_unit(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.base_unit_ = value;
}
inline void AccountConfig::set_base_unit(float value) {
  _internal_set_base_unit(value);
  // @@protoc_insertion_point(field_set:trader.AccountConfig.base_unit)
}

// optional float quote_unit = 4;
inline bool AccountConfig::_internal_has_quote_unit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AccountConfig::has_quote_unit() const {
  return _internal_has_quote_unit();
}
inline void AccountConfig::clear_quote_unit() {
  _impl_.quote_unit_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float AccountConfig::_internal_quote_unit() const {
  return _impl_.quote_unit_;
}
inline float AccountConfig::quote_unit() const {
  // @@protoc_insertion_point(field_get:trader.AccountConfig.quote_unit)
  return _internal_quote_unit();
}
inline void AccountConfig::_internal_set_quote_unit(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.quote_unit_ = value;
}
inline void AccountConfig::set_quote_unit(float value) {
  _internal_set_quote_unit(value);
  // @@protoc_insertion_point(field_set:trader.AccountConfig.quote_unit)
}

// optional .trader.FeeConfig market_order_fee_config = 5;
inline bool AccountConfig::_internal_has_market_order_fee_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.market_order_fee_config_ != nullptr);
  return value;
}
inline bool AccountConfig::has_market_order_fee_config() const {
  return _internal_has_market_order_fee_config();
}
inline void AccountConfig::clear_market_order_fee_config() {
  if (_impl_.market_order_fee_config_ != nullptr) _impl_.market_order_fee_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::trader::FeeConfig& AccountConfig::_internal_market_order_fee_config() const {
  const ::trader::FeeConfig* p = _impl_.market_order_fee_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::trader::FeeConfig&>(
      ::trader::_FeeConfig_default_instance_);
}
inline const ::trader::FeeConfig& AccountConfig::market_order_fee_config() const {
  // @@protoc_insertion_point(field_get:trader.AccountConfig.market_order_fee_config)
  return _internal_market_order_fee_config();
}
inline void AccountConfig::unsafe_arena_set_allocated_market_order_fee_config(
    ::trader::FeeConfig* market_order_fee_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.market_order_fee_config_);
  }
  _impl_.market_order_fee_config_ = market_order_fee_config;
  if (market_order_fee_config) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trader.AccountConfig.market_order_fee_config)
}
inline ::trader::FeeConfig* AccountConfig::release_market_order_fee_config() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::trader::FeeConfig* temp = _impl_.market_order_fee_config_;
  _impl_.market_order_fee_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::trader::FeeConfig* AccountConfig::unsafe_arena_release_market_order_fee_config() {
  // @@protoc_insertion_point(field_release:trader.AccountConfig.market_order_fee_config)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::trader::FeeConfig* temp = _impl_.market_order_fee_config_;
  _impl_.market_order_fee_config_ = nullptr;
  return temp;
}
inline ::trader::FeeConfig* AccountConfig::_internal_mutable_market_order_fee_config() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.market_order_fee_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::trader::FeeConfig>(GetArenaForAllocation());
    _impl_.market_order_fee_config_ = p;
  }
  return _impl_.market_order_fee_config_;
}
inline ::trader::FeeConfig* AccountConfig::mutable_market_order_fee_config() {
  ::trader::FeeConfig* _msg = _internal_mutable_market_order_fee_config();
  // @@protoc_insertion_point(field_mutable:trader.AccountConfig.market_order_fee_config)
  return _msg;
}
inline void AccountConfig::set_allocated_market_order_fee_config(::trader::FeeConfig* market_order_fee_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.market_order_fee_config_;
  }
  if (market_order_fee_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(market_order_fee_config);
    if (message_arena != submessage_arena) {
      market_order_fee_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, market_order_fee_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.market_order_fee_config_ = market_order_fee_config;
  // @@protoc_insertion_point(field_set_allocated:trader.AccountConfig.market_order_fee_config)
}

// optional .trader.FeeConfig stop_order_fee_config = 6;
inline bool AccountConfig::_internal_has_stop_order_fee_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stop_order_fee_config_ != nullptr);
  return value;
}
inline bool AccountConfig::has_stop_order_fee_config() const {
  return _internal_has_stop_order_fee_config();
}
inline void AccountConfig::clear_stop_order_fee_config() {
  if (_impl_.stop_order_fee_config_ != nullptr) _impl_.stop_order_fee_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::trader::FeeConfig& AccountConfig::_internal_stop_order_fee_config() const {
  const ::trader::FeeConfig* p = _impl_.stop_order_fee_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::trader::FeeConfig&>(
      ::trader::_FeeConfig_default_instance_);
}
inline const ::trader::FeeConfig& AccountConfig::stop_order_fee_config() const {
  // @@protoc_insertion_point(field_get:trader.AccountConfig.stop_order_fee_config)
  return _internal_stop_order_fee_config();
}
inline void AccountConfig::unsafe_arena_set_allocated_stop_order_fee_config(
    ::trader::FeeConfig* stop_order_fee_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stop_order_fee_config_);
  }
  _impl_.stop_order_fee_config_ = stop_order_fee_config;
  if (stop_order_fee_config) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trader.AccountConfig.stop_order_fee_config)
}
inline ::trader::FeeConfig* AccountConfig::release_stop_order_fee_config() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::trader::FeeConfig* temp = _impl_.stop_order_fee_config_;
  _impl_.stop_order_fee_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::trader::FeeConfig* AccountConfig::unsafe_arena_release_stop_order_fee_config() {
  // @@protoc_insertion_point(field_release:trader.AccountConfig.stop_order_fee_config)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::trader::FeeConfig* temp = _impl_.stop_order_fee_config_;
  _impl_.stop_order_fee_config_ = nullptr;
  return temp;
}
inline ::trader::FeeConfig* AccountConfig::_internal_mutable_stop_order_fee_config() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.stop_order_fee_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::trader::FeeConfig>(GetArenaForAllocation());
    _impl_.stop_order_fee_config_ = p;
  }
  return _impl_.stop_order_fee_config_;
}
inline ::trader::FeeConfig* AccountConfig::mutable_stop_order_fee_config() {
  ::trader::FeeConfig* _msg = _internal_mutable_stop_order_fee_config();
  // @@protoc_insertion_point(field_mutable:trader.AccountConfig.stop_order_fee_config)
  return _msg;
}
inline void AccountConfig::set_allocated_stop_order_fee_config(::trader::FeeConfig* stop_order_fee_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.stop_order_fee_config_;
  }
  if (stop_order_fee_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stop_order_fee_config);
    if (message_arena != submessage_arena) {
      stop_order_fee_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_order_fee_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.stop_order_fee_config_ = stop_order_fee_config;
  // @@protoc_insertion_point(field_set_allocated:trader.AccountConfig.stop_order_fee_config)
}

// optional .trader.FeeConfig limit_order_fee_config = 7;
inline bool AccountConfig::_internal_has_limit_order_fee_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.limit_order_fee_config_ != nullptr);
  return value;
}
inline bool AccountConfig::has_limit_order_fee_config() const {
  return _internal_has_limit_order_fee_config();
}
inline void AccountConfig::clear_limit_order_fee_config() {
  if (_impl_.limit_order_fee_config_ != nullptr) _impl_.limit_order_fee_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::trader::FeeConfig& AccountConfig::_internal_limit_order_fee_config() const {
  const ::trader::FeeConfig* p = _impl_.limit_order_fee_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::trader::FeeConfig&>(
      ::trader::_FeeConfig_default_instance_);
}
inline const ::trader::FeeConfig& AccountConfig::limit_order_fee_config() const {
  // @@protoc_insertion_point(field_get:trader.AccountConfig.limit_order_fee_config)
  return _internal_limit_order_fee_config();
}
inline void AccountConfig::unsafe_arena_set_allocated_limit_order_fee_config(
    ::trader::FeeConfig* limit_order_fee_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.limit_order_fee_config_);
  }
  _impl_.limit_order_fee_config_ = limit_order_fee_config;
  if (limit_order_fee_config) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trader.AccountConfig.limit_order_fee_config)
}
inline ::trader::FeeConfig* AccountConfig::release_limit_order_fee_config() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::trader::FeeConfig* temp = _impl_.limit_order_fee_config_;
  _impl_.limit_order_fee_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::trader::FeeConfig* AccountConfig::unsafe_arena_release_limit_order_fee_config() {
  // @@protoc_insertion_point(field_release:trader.AccountConfig.limit_order_fee_config)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::trader::FeeConfig* temp = _impl_.limit_order_fee_config_;
  _impl_.limit_order_fee_config_ = nullptr;
  return temp;
}
inline ::trader::FeeConfig* AccountConfig::_internal_mutable_limit_order_fee_config() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.limit_order_fee_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::trader::FeeConfig>(GetArenaForAllocation());
    _impl_.limit_order_fee_config_ = p;
  }
  return _impl_.limit_order_fee_config_;
}
inline ::trader::FeeConfig* AccountConfig::mutable_limit_order_fee_config() {
  ::trader::FeeConfig* _msg = _internal_mutable_limit_order_fee_config();
  // @@protoc_insertion_point(field_mutable:trader.AccountConfig.limit_order_fee_config)
  return _msg;
}
inline void AccountConfig::set_allocated_limit_order_fee_config(::trader::FeeConfig* limit_order_fee_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.limit_order_fee_config_;
  }
  if (limit_order_fee_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(limit_order_fee_config);
    if (message_arena != submessage_arena) {
      limit_order_fee_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, limit_order_fee_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.limit_order_fee_config_ = limit_order_fee_config;
  // @@protoc_insertion_point(field_set_allocated:trader.AccountConfig.limit_order_fee_config)
}

// optional float market_liquidity = 8;
inline bool AccountConfig::_internal_has_market_liquidity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AccountConfig::has_market_liquidity() const {
  return _internal_has_market_liquidity();
}
inline void AccountConfig::clear_market_liquidity() {
  _impl_.market_liquidity_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float AccountConfig::_internal_market_liquidity() const {
  return _impl_.market_liquidity_;
}
inline float AccountConfig::market_liquidity() const {
  // @@protoc_insertion_point(field_get:trader.AccountConfig.market_liquidity)
  return _internal_market_liquidity();
}
inline void AccountConfig::_internal_set_market_liquidity(float value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.market_liquidity_ = value;
}
inline void AccountConfig::set_market_liquidity(float value) {
  _internal_set_market_liquidity(value);
  // @@protoc_insertion_point(field_set:trader.AccountConfig.market_liquidity)
}

// optional float max_volume_ratio = 9;
inline bool AccountConfig::_internal_has_max_volume_ratio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool AccountConfig::has_max_volume_ratio() const {
  return _internal_has_max_volume_ratio();
}
inline void AccountConfig::clear_max_volume_ratio() {
  _impl_.max_volume_ratio_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float AccountConfig::_internal_max_volume_ratio() const {
  return _impl_.max_volume_ratio_;
}
inline float AccountConfig::max_volume_ratio() const {
  // @@protoc_insertion_point(field_get:trader.AccountConfig.max_volume_ratio)
  return _internal_max_volume_ratio();
}
inline void AccountConfig::_internal_set_max_volume_ratio(float value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.max_volume_ratio_ = value;
}
inline void AccountConfig::set_max_volume_ratio(float value) {
  _internal_set_max_volume_ratio(value);
  // @@protoc_insertion_point(field_set:trader.AccountConfig.max_volume_ratio)
}

// -------------------------------------------------------------------

// Order

// optional .trader.Order.Type type = 1;
inline bool Order::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Order::has_type() const {
  return _internal_has_type();
}
inline void Order::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::trader::Order_Type Order::_internal_type() const {
  return static_cast< ::trader::Order_Type >(_impl_.type_);
}
inline ::trader::Order_Type Order::type() const {
  // @@protoc_insertion_point(field_get:trader.Order.type)
  return _internal_type();
}
inline void Order::_internal_set_type(::trader::Order_Type value) {
  assert(::trader::Order_Type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.type_ = value;
}
inline void Order::set_type(::trader::Order_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:trader.Order.type)
}

// optional .trader.Order.Side side = 2;
inline bool Order::_internal_has_side() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Order::has_side() const {
  return _internal_has_side();
}
inline void Order::clear_side() {
  _impl_.side_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::trader::Order_Side Order::_internal_side() const {
  return static_cast< ::trader::Order_Side >(_impl_.side_);
}
inline ::trader::Order_Side Order::side() const {
  // @@protoc_insertion_point(field_get:trader.Order.side)
  return _internal_side();
}
inline void Order::_internal_set_side(::trader::Order_Side value) {
  assert(::trader::Order_Side_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.side_ = value;
}
inline void Order::set_side(::trader::Order_Side value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:trader.Order.side)
}

// float base_amount = 3;
inline bool Order::_internal_has_base_amount() const {
  return oneof_amount_case() == kBaseAmount;
}
inline bool Order::has_base_amount() const {
  return _internal_has_base_amount();
}
inline void Order::set_has_base_amount() {
  _impl_._oneof_case_[0] = kBaseAmount;
}
inline void Order::clear_base_amount() {
  if (_internal_has_base_amount()) {
    _impl_.oneof_amount_.base_amount_ = 0;
    clear_has_oneof_amount();
  }
}
inline float Order::_internal_base_amount() const {
  if (_internal_has_base_amount()) {
    return _impl_.oneof_amount_.base_amount_;
  }
  return 0;
}
inline void Order::_internal_set_base_amount(float value) {
  if (!_internal_has_base_amount()) {
    clear_oneof_amount();
    set_has_base_amount();
  }
  _impl_.oneof_amount_.base_amount_ = value;
}
inline float Order::base_amount() const {
  // @@protoc_insertion_point(field_get:trader.Order.base_amount)
  return _internal_base_amount();
}
inline void Order::set_base_amount(float value) {
  _internal_set_base_amount(value);
  // @@protoc_insertion_point(field_set:trader.Order.base_amount)
}

// float quote_amount = 4;
inline bool Order::_internal_has_quote_amount() const {
  return oneof_amount_case() == kQuoteAmount;
}
inline bool Order::has_quote_amount() const {
  return _internal_has_quote_amount();
}
inline void Order::set_has_quote_amount() {
  _impl_._oneof_case_[0] = kQuoteAmount;
}
inline void Order::clear_quote_amount() {
  if (_internal_has_quote_amount()) {
    _impl_.oneof_amount_.quote_amount_ = 0;
    clear_has_oneof_amount();
  }
}
inline float Order::_internal_quote_amount() const {
  if (_internal_has_quote_amount()) {
    return _impl_.oneof_amount_.quote_amount_;
  }
  return 0;
}
inline void Order::_internal_set_quote_amount(float value) {
  if (!_internal_has_quote_amount()) {
    clear_oneof_amount();
    set_has_quote_amount();
  }
  _impl_.oneof_amount_.quote_amount_ = value;
}
inline float Order::quote_amount() const {
  // @@protoc_insertion_point(field_get:trader.Order.quote_amount)
  return _internal_quote_amount();
}
inline void Order::set_quote_amount(float value) {
  _internal_set_quote_amount(value);
  // @@protoc_insertion_point(field_set:trader.Order.quote_amount)
}

// optional float price = 5;
inline bool Order::_internal_has_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Order::has_price() const {
  return _internal_has_price();
}
inline void Order::clear_price() {
  _impl_.price_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float Order::_internal_price() const {
  return _impl_.price_;
}
inline float Order::price() const {
  // @@protoc_insertion_point(field_get:trader.Order.price)
  return _internal_price();
}
inline void Order::_internal_set_price(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.price_ = value;
}
inline void Order::set_price(float value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:trader.Order.price)
}

inline bool Order::has_oneof_amount() const {
  return oneof_amount_case() != ONEOF_AMOUNT_NOT_SET;
}
inline void Order::clear_has_oneof_amount() {
  _impl_._oneof_case_[0] = ONEOF_AMOUNT_NOT_SET;
}
inline Order::OneofAmountCase Order::oneof_amount_case() const {
  return Order::OneofAmountCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace trader

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::trader::Order_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trader::Order_Type>() {
  return ::trader::Order_Type_descriptor();
}
template <> struct is_proto_enum< ::trader::Order_Side> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trader::Order_Side>() {
  return ::trader::Order_Side_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_base_2fbase_2eproto
