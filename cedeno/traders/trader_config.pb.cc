// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: traders/trader_config.proto

#include "traders/trader_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace trader {
PROTOBUF_CONSTEXPR RebalancingTraderConfig::RebalancingTraderConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.alpha_)*/0
  , /*decltype(_impl_.epsilon_)*/0} {}
struct RebalancingTraderConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RebalancingTraderConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RebalancingTraderConfigDefaultTypeInternal() {}
  union {
    RebalancingTraderConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RebalancingTraderConfigDefaultTypeInternal _RebalancingTraderConfig_default_instance_;
PROTOBUF_CONSTEXPR StopTraderConfig::StopTraderConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stop_order_margin_)*/0
  , /*decltype(_impl_.stop_order_move_margin_)*/0
  , /*decltype(_impl_.stop_order_increase_per_day_)*/0
  , /*decltype(_impl_.stop_order_decrease_per_day_)*/0} {}
struct StopTraderConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopTraderConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopTraderConfigDefaultTypeInternal() {}
  union {
    StopTraderConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopTraderConfigDefaultTypeInternal _StopTraderConfig_default_instance_;
}  // namespace trader
static ::_pb::Metadata file_level_metadata_traders_2ftrader_5fconfig_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_traders_2ftrader_5fconfig_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_traders_2ftrader_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_traders_2ftrader_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::trader::RebalancingTraderConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::trader::RebalancingTraderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trader::RebalancingTraderConfig, _impl_.alpha_),
  PROTOBUF_FIELD_OFFSET(::trader::RebalancingTraderConfig, _impl_.epsilon_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::trader::StopTraderConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::trader::StopTraderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trader::StopTraderConfig, _impl_.stop_order_margin_),
  PROTOBUF_FIELD_OFFSET(::trader::StopTraderConfig, _impl_.stop_order_move_margin_),
  PROTOBUF_FIELD_OFFSET(::trader::StopTraderConfig, _impl_.stop_order_increase_per_day_),
  PROTOBUF_FIELD_OFFSET(::trader::StopTraderConfig, _impl_.stop_order_decrease_per_day_),
  0,
  1,
  2,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::trader::RebalancingTraderConfig)},
  { 10, 20, -1, sizeof(::trader::StopTraderConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::trader::_RebalancingTraderConfig_default_instance_._instance,
  &::trader::_StopTraderConfig_default_instance_._instance,
};

const char descriptor_table_protodef_traders_2ftrader_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033traders/trader_config.proto\022\006trader\"9\n"
  "\027RebalancingTraderConfig\022\r\n\005alpha\030\001 \001(\002\022"
  "\017\n\007epsilon\030\002 \001(\002\"\227\001\n\020StopTraderConfig\022\031\n"
  "\021stop_order_margin\030\001 \001(\002\022\036\n\026stop_order_m"
  "ove_margin\030\002 \001(\002\022#\n\033stop_order_increase_"
  "per_day\030\003 \001(\002\022#\n\033stop_order_decrease_per"
  "_day\030\004 \001(\002"
  ;
static ::_pbi::once_flag descriptor_table_traders_2ftrader_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_traders_2ftrader_5fconfig_2eproto = {
    false, false, 250, descriptor_table_protodef_traders_2ftrader_5fconfig_2eproto,
    "traders/trader_config.proto",
    &descriptor_table_traders_2ftrader_5fconfig_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_traders_2ftrader_5fconfig_2eproto::offsets,
    file_level_metadata_traders_2ftrader_5fconfig_2eproto, file_level_enum_descriptors_traders_2ftrader_5fconfig_2eproto,
    file_level_service_descriptors_traders_2ftrader_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_traders_2ftrader_5fconfig_2eproto_getter() {
  return &descriptor_table_traders_2ftrader_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_traders_2ftrader_5fconfig_2eproto(&descriptor_table_traders_2ftrader_5fconfig_2eproto);
namespace trader {

// ===================================================================

class RebalancingTraderConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<RebalancingTraderConfig>()._impl_._has_bits_);
  static void set_has_alpha(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_epsilon(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RebalancingTraderConfig::RebalancingTraderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:trader.RebalancingTraderConfig)
}
RebalancingTraderConfig::RebalancingTraderConfig(const RebalancingTraderConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RebalancingTraderConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.alpha_){}
    , decltype(_impl_.epsilon_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.alpha_, &from._impl_.alpha_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.epsilon_) -
    reinterpret_cast<char*>(&_impl_.alpha_)) + sizeof(_impl_.epsilon_));
  // @@protoc_insertion_point(copy_constructor:trader.RebalancingTraderConfig)
}

inline void RebalancingTraderConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.alpha_){0}
    , decltype(_impl_.epsilon_){0}
  };
}

RebalancingTraderConfig::~RebalancingTraderConfig() {
  // @@protoc_insertion_point(destructor:trader.RebalancingTraderConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RebalancingTraderConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RebalancingTraderConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RebalancingTraderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:trader.RebalancingTraderConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.alpha_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.epsilon_) -
        reinterpret_cast<char*>(&_impl_.alpha_)) + sizeof(_impl_.epsilon_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RebalancingTraderConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float alpha = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_alpha(&has_bits);
          _impl_.alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float epsilon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_epsilon(&has_bits);
          _impl_.epsilon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RebalancingTraderConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trader.RebalancingTraderConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float alpha = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_alpha(), target);
  }

  // optional float epsilon = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_epsilon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trader.RebalancingTraderConfig)
  return target;
}

size_t RebalancingTraderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trader.RebalancingTraderConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float alpha = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float epsilon = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RebalancingTraderConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RebalancingTraderConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RebalancingTraderConfig::GetClassData() const { return &_class_data_; }


void RebalancingTraderConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RebalancingTraderConfig*>(&to_msg);
  auto& from = static_cast<const RebalancingTraderConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:trader.RebalancingTraderConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.alpha_ = from._impl_.alpha_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.epsilon_ = from._impl_.epsilon_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RebalancingTraderConfig::CopyFrom(const RebalancingTraderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trader.RebalancingTraderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RebalancingTraderConfig::IsInitialized() const {
  return true;
}

void RebalancingTraderConfig::InternalSwap(RebalancingTraderConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RebalancingTraderConfig, _impl_.epsilon_)
      + sizeof(RebalancingTraderConfig::_impl_.epsilon_)
      - PROTOBUF_FIELD_OFFSET(RebalancingTraderConfig, _impl_.alpha_)>(
          reinterpret_cast<char*>(&_impl_.alpha_),
          reinterpret_cast<char*>(&other->_impl_.alpha_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RebalancingTraderConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_traders_2ftrader_5fconfig_2eproto_getter, &descriptor_table_traders_2ftrader_5fconfig_2eproto_once,
      file_level_metadata_traders_2ftrader_5fconfig_2eproto[0]);
}

// ===================================================================

class StopTraderConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<StopTraderConfig>()._impl_._has_bits_);
  static void set_has_stop_order_margin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stop_order_move_margin(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stop_order_increase_per_day(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stop_order_decrease_per_day(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

StopTraderConfig::StopTraderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:trader.StopTraderConfig)
}
StopTraderConfig::StopTraderConfig(const StopTraderConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StopTraderConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stop_order_margin_){}
    , decltype(_impl_.stop_order_move_margin_){}
    , decltype(_impl_.stop_order_increase_per_day_){}
    , decltype(_impl_.stop_order_decrease_per_day_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.stop_order_margin_, &from._impl_.stop_order_margin_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.stop_order_decrease_per_day_) -
    reinterpret_cast<char*>(&_impl_.stop_order_margin_)) + sizeof(_impl_.stop_order_decrease_per_day_));
  // @@protoc_insertion_point(copy_constructor:trader.StopTraderConfig)
}

inline void StopTraderConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stop_order_margin_){0}
    , decltype(_impl_.stop_order_move_margin_){0}
    , decltype(_impl_.stop_order_increase_per_day_){0}
    , decltype(_impl_.stop_order_decrease_per_day_){0}
  };
}

StopTraderConfig::~StopTraderConfig() {
  // @@protoc_insertion_point(destructor:trader.StopTraderConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StopTraderConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StopTraderConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StopTraderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:trader.StopTraderConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.stop_order_margin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.stop_order_decrease_per_day_) -
        reinterpret_cast<char*>(&_impl_.stop_order_margin_)) + sizeof(_impl_.stop_order_decrease_per_day_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopTraderConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float stop_order_margin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_stop_order_margin(&has_bits);
          _impl_.stop_order_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float stop_order_move_margin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_stop_order_move_margin(&has_bits);
          _impl_.stop_order_move_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float stop_order_increase_per_day = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_stop_order_increase_per_day(&has_bits);
          _impl_.stop_order_increase_per_day_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float stop_order_decrease_per_day = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_stop_order_decrease_per_day(&has_bits);
          _impl_.stop_order_decrease_per_day_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StopTraderConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trader.StopTraderConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float stop_order_margin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_stop_order_margin(), target);
  }

  // optional float stop_order_move_margin = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_stop_order_move_margin(), target);
  }

  // optional float stop_order_increase_per_day = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_stop_order_increase_per_day(), target);
  }

  // optional float stop_order_decrease_per_day = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_stop_order_decrease_per_day(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trader.StopTraderConfig)
  return target;
}

size_t StopTraderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trader.StopTraderConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float stop_order_margin = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float stop_order_move_margin = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float stop_order_increase_per_day = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float stop_order_decrease_per_day = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopTraderConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StopTraderConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopTraderConfig::GetClassData() const { return &_class_data_; }


void StopTraderConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StopTraderConfig*>(&to_msg);
  auto& from = static_cast<const StopTraderConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:trader.StopTraderConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.stop_order_margin_ = from._impl_.stop_order_margin_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.stop_order_move_margin_ = from._impl_.stop_order_move_margin_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.stop_order_increase_per_day_ = from._impl_.stop_order_increase_per_day_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.stop_order_decrease_per_day_ = from._impl_.stop_order_decrease_per_day_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopTraderConfig::CopyFrom(const StopTraderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trader.StopTraderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopTraderConfig::IsInitialized() const {
  return true;
}

void StopTraderConfig::InternalSwap(StopTraderConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StopTraderConfig, _impl_.stop_order_decrease_per_day_)
      + sizeof(StopTraderConfig::_impl_.stop_order_decrease_per_day_)
      - PROTOBUF_FIELD_OFFSET(StopTraderConfig, _impl_.stop_order_margin_)>(
          reinterpret_cast<char*>(&_impl_.stop_order_margin_),
          reinterpret_cast<char*>(&other->_impl_.stop_order_margin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StopTraderConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_traders_2ftrader_5fconfig_2eproto_getter, &descriptor_table_traders_2ftrader_5fconfig_2eproto_once,
      file_level_metadata_traders_2ftrader_5fconfig_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace trader
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::trader::RebalancingTraderConfig*
Arena::CreateMaybeMessage< ::trader::RebalancingTraderConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trader::RebalancingTraderConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::trader::StopTraderConfig*
Arena::CreateMaybeMessage< ::trader::StopTraderConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trader::StopTraderConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
