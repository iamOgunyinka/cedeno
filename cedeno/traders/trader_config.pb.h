// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: traders/trader_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_traders_2ftrader_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_traders_2ftrader_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_traders_2ftrader_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_traders_2ftrader_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_traders_2ftrader_5fconfig_2eproto;
namespace trader {
class RebalancingTraderConfig;
struct RebalancingTraderConfigDefaultTypeInternal;
extern RebalancingTraderConfigDefaultTypeInternal _RebalancingTraderConfig_default_instance_;
class StopTraderConfig;
struct StopTraderConfigDefaultTypeInternal;
extern StopTraderConfigDefaultTypeInternal _StopTraderConfig_default_instance_;
}  // namespace trader
PROTOBUF_NAMESPACE_OPEN
template<> ::trader::RebalancingTraderConfig* Arena::CreateMaybeMessage<::trader::RebalancingTraderConfig>(Arena*);
template<> ::trader::StopTraderConfig* Arena::CreateMaybeMessage<::trader::StopTraderConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace trader {

// ===================================================================

class RebalancingTraderConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trader.RebalancingTraderConfig) */ {
 public:
  inline RebalancingTraderConfig() : RebalancingTraderConfig(nullptr) {}
  ~RebalancingTraderConfig() override;
  explicit PROTOBUF_CONSTEXPR RebalancingTraderConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RebalancingTraderConfig(const RebalancingTraderConfig& from);
  RebalancingTraderConfig(RebalancingTraderConfig&& from) noexcept
    : RebalancingTraderConfig() {
    *this = ::std::move(from);
  }

  inline RebalancingTraderConfig& operator=(const RebalancingTraderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RebalancingTraderConfig& operator=(RebalancingTraderConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RebalancingTraderConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const RebalancingTraderConfig* internal_default_instance() {
    return reinterpret_cast<const RebalancingTraderConfig*>(
               &_RebalancingTraderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RebalancingTraderConfig& a, RebalancingTraderConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(RebalancingTraderConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RebalancingTraderConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RebalancingTraderConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RebalancingTraderConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RebalancingTraderConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RebalancingTraderConfig& from) {
    RebalancingTraderConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RebalancingTraderConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trader.RebalancingTraderConfig";
  }
  protected:
  explicit RebalancingTraderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlphaFieldNumber = 1,
    kEpsilonFieldNumber = 2,
  };
  // optional float alpha = 1;
  bool has_alpha() const;
  private:
  bool _internal_has_alpha() const;
  public:
  void clear_alpha();
  float alpha() const;
  void set_alpha(float value);
  private:
  float _internal_alpha() const;
  void _internal_set_alpha(float value);
  public:

  // optional float epsilon = 2;
  bool has_epsilon() const;
  private:
  bool _internal_has_epsilon() const;
  public:
  void clear_epsilon();
  float epsilon() const;
  void set_epsilon(float value);
  private:
  float _internal_epsilon() const;
  void _internal_set_epsilon(float value);
  public:

  // @@protoc_insertion_point(class_scope:trader.RebalancingTraderConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float alpha_;
    float epsilon_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_traders_2ftrader_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class StopTraderConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trader.StopTraderConfig) */ {
 public:
  inline StopTraderConfig() : StopTraderConfig(nullptr) {}
  ~StopTraderConfig() override;
  explicit PROTOBUF_CONSTEXPR StopTraderConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopTraderConfig(const StopTraderConfig& from);
  StopTraderConfig(StopTraderConfig&& from) noexcept
    : StopTraderConfig() {
    *this = ::std::move(from);
  }

  inline StopTraderConfig& operator=(const StopTraderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopTraderConfig& operator=(StopTraderConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopTraderConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopTraderConfig* internal_default_instance() {
    return reinterpret_cast<const StopTraderConfig*>(
               &_StopTraderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StopTraderConfig& a, StopTraderConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(StopTraderConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopTraderConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopTraderConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopTraderConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopTraderConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StopTraderConfig& from) {
    StopTraderConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopTraderConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trader.StopTraderConfig";
  }
  protected:
  explicit StopTraderConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopOrderMarginFieldNumber = 1,
    kStopOrderMoveMarginFieldNumber = 2,
    kStopOrderIncreasePerDayFieldNumber = 3,
    kStopOrderDecreasePerDayFieldNumber = 4,
  };
  // optional float stop_order_margin = 1;
  bool has_stop_order_margin() const;
  private:
  bool _internal_has_stop_order_margin() const;
  public:
  void clear_stop_order_margin();
  float stop_order_margin() const;
  void set_stop_order_margin(float value);
  private:
  float _internal_stop_order_margin() const;
  void _internal_set_stop_order_margin(float value);
  public:

  // optional float stop_order_move_margin = 2;
  bool has_stop_order_move_margin() const;
  private:
  bool _internal_has_stop_order_move_margin() const;
  public:
  void clear_stop_order_move_margin();
  float stop_order_move_margin() const;
  void set_stop_order_move_margin(float value);
  private:
  float _internal_stop_order_move_margin() const;
  void _internal_set_stop_order_move_margin(float value);
  public:

  // optional float stop_order_increase_per_day = 3;
  bool has_stop_order_increase_per_day() const;
  private:
  bool _internal_has_stop_order_increase_per_day() const;
  public:
  void clear_stop_order_increase_per_day();
  float stop_order_increase_per_day() const;
  void set_stop_order_increase_per_day(float value);
  private:
  float _internal_stop_order_increase_per_day() const;
  void _internal_set_stop_order_increase_per_day(float value);
  public:

  // optional float stop_order_decrease_per_day = 4;
  bool has_stop_order_decrease_per_day() const;
  private:
  bool _internal_has_stop_order_decrease_per_day() const;
  public:
  void clear_stop_order_decrease_per_day();
  float stop_order_decrease_per_day() const;
  void set_stop_order_decrease_per_day(float value);
  private:
  float _internal_stop_order_decrease_per_day() const;
  void _internal_set_stop_order_decrease_per_day(float value);
  public:

  // @@protoc_insertion_point(class_scope:trader.StopTraderConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float stop_order_margin_;
    float stop_order_move_margin_;
    float stop_order_increase_per_day_;
    float stop_order_decrease_per_day_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_traders_2ftrader_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RebalancingTraderConfig

// optional float alpha = 1;
inline bool RebalancingTraderConfig::_internal_has_alpha() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RebalancingTraderConfig::has_alpha() const {
  return _internal_has_alpha();
}
inline void RebalancingTraderConfig::clear_alpha() {
  _impl_.alpha_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float RebalancingTraderConfig::_internal_alpha() const {
  return _impl_.alpha_;
}
inline float RebalancingTraderConfig::alpha() const {
  // @@protoc_insertion_point(field_get:trader.RebalancingTraderConfig.alpha)
  return _internal_alpha();
}
inline void RebalancingTraderConfig::_internal_set_alpha(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.alpha_ = value;
}
inline void RebalancingTraderConfig::set_alpha(float value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:trader.RebalancingTraderConfig.alpha)
}

// optional float epsilon = 2;
inline bool RebalancingTraderConfig::_internal_has_epsilon() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RebalancingTraderConfig::has_epsilon() const {
  return _internal_has_epsilon();
}
inline void RebalancingTraderConfig::clear_epsilon() {
  _impl_.epsilon_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float RebalancingTraderConfig::_internal_epsilon() const {
  return _impl_.epsilon_;
}
inline float RebalancingTraderConfig::epsilon() const {
  // @@protoc_insertion_point(field_get:trader.RebalancingTraderConfig.epsilon)
  return _internal_epsilon();
}
inline void RebalancingTraderConfig::_internal_set_epsilon(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.epsilon_ = value;
}
inline void RebalancingTraderConfig::set_epsilon(float value) {
  _internal_set_epsilon(value);
  // @@protoc_insertion_point(field_set:trader.RebalancingTraderConfig.epsilon)
}

// -------------------------------------------------------------------

// StopTraderConfig

// optional float stop_order_margin = 1;
inline bool StopTraderConfig::_internal_has_stop_order_margin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StopTraderConfig::has_stop_order_margin() const {
  return _internal_has_stop_order_margin();
}
inline void StopTraderConfig::clear_stop_order_margin() {
  _impl_.stop_order_margin_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float StopTraderConfig::_internal_stop_order_margin() const {
  return _impl_.stop_order_margin_;
}
inline float StopTraderConfig::stop_order_margin() const {
  // @@protoc_insertion_point(field_get:trader.StopTraderConfig.stop_order_margin)
  return _internal_stop_order_margin();
}
inline void StopTraderConfig::_internal_set_stop_order_margin(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.stop_order_margin_ = value;
}
inline void StopTraderConfig::set_stop_order_margin(float value) {
  _internal_set_stop_order_margin(value);
  // @@protoc_insertion_point(field_set:trader.StopTraderConfig.stop_order_margin)
}

// optional float stop_order_move_margin = 2;
inline bool StopTraderConfig::_internal_has_stop_order_move_margin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StopTraderConfig::has_stop_order_move_margin() const {
  return _internal_has_stop_order_move_margin();
}
inline void StopTraderConfig::clear_stop_order_move_margin() {
  _impl_.stop_order_move_margin_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float StopTraderConfig::_internal_stop_order_move_margin() const {
  return _impl_.stop_order_move_margin_;
}
inline float StopTraderConfig::stop_order_move_margin() const {
  // @@protoc_insertion_point(field_get:trader.StopTraderConfig.stop_order_move_margin)
  return _internal_stop_order_move_margin();
}
inline void StopTraderConfig::_internal_set_stop_order_move_margin(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.stop_order_move_margin_ = value;
}
inline void StopTraderConfig::set_stop_order_move_margin(float value) {
  _internal_set_stop_order_move_margin(value);
  // @@protoc_insertion_point(field_set:trader.StopTraderConfig.stop_order_move_margin)
}

// optional float stop_order_increase_per_day = 3;
inline bool StopTraderConfig::_internal_has_stop_order_increase_per_day() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StopTraderConfig::has_stop_order_increase_per_day() const {
  return _internal_has_stop_order_increase_per_day();
}
inline void StopTraderConfig::clear_stop_order_increase_per_day() {
  _impl_.stop_order_increase_per_day_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float StopTraderConfig::_internal_stop_order_increase_per_day() const {
  return _impl_.stop_order_increase_per_day_;
}
inline float StopTraderConfig::stop_order_increase_per_day() const {
  // @@protoc_insertion_point(field_get:trader.StopTraderConfig.stop_order_increase_per_day)
  return _internal_stop_order_increase_per_day();
}
inline void StopTraderConfig::_internal_set_stop_order_increase_per_day(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.stop_order_increase_per_day_ = value;
}
inline void StopTraderConfig::set_stop_order_increase_per_day(float value) {
  _internal_set_stop_order_increase_per_day(value);
  // @@protoc_insertion_point(field_set:trader.StopTraderConfig.stop_order_increase_per_day)
}

// optional float stop_order_decrease_per_day = 4;
inline bool StopTraderConfig::_internal_has_stop_order_decrease_per_day() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool StopTraderConfig::has_stop_order_decrease_per_day() const {
  return _internal_has_stop_order_decrease_per_day();
}
inline void StopTraderConfig::clear_stop_order_decrease_per_day() {
  _impl_.stop_order_decrease_per_day_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float StopTraderConfig::_internal_stop_order_decrease_per_day() const {
  return _impl_.stop_order_decrease_per_day_;
}
inline float StopTraderConfig::stop_order_decrease_per_day() const {
  // @@protoc_insertion_point(field_get:trader.StopTraderConfig.stop_order_decrease_per_day)
  return _internal_stop_order_decrease_per_day();
}
inline void StopTraderConfig::_internal_set_stop_order_decrease_per_day(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.stop_order_decrease_per_day_ = value;
}
inline void StopTraderConfig::set_stop_order_decrease_per_day(float value) {
  _internal_set_stop_order_decrease_per_day(value);
  // @@protoc_insertion_point(field_set:trader.StopTraderConfig.stop_order_decrease_per_day)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace trader

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_traders_2ftrader_5fconfig_2eproto
