// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eval/eval.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_eval_2feval_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_eval_2feval_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "base/base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_eval_2feval_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_eval_2feval_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_eval_2feval_2eproto;
namespace trader {
class EvaluationConfig;
struct EvaluationConfigDefaultTypeInternal;
extern EvaluationConfigDefaultTypeInternal _EvaluationConfig_default_instance_;
class EvaluationResult;
struct EvaluationResultDefaultTypeInternal;
extern EvaluationResultDefaultTypeInternal _EvaluationResult_default_instance_;
class EvaluationResult_Period;
struct EvaluationResult_PeriodDefaultTypeInternal;
extern EvaluationResult_PeriodDefaultTypeInternal _EvaluationResult_Period_default_instance_;
class ExecutionResult;
struct ExecutionResultDefaultTypeInternal;
extern ExecutionResultDefaultTypeInternal _ExecutionResult_default_instance_;
}  // namespace trader
PROTOBUF_NAMESPACE_OPEN
template<> ::trader::EvaluationConfig* Arena::CreateMaybeMessage<::trader::EvaluationConfig>(Arena*);
template<> ::trader::EvaluationResult* Arena::CreateMaybeMessage<::trader::EvaluationResult>(Arena*);
template<> ::trader::EvaluationResult_Period* Arena::CreateMaybeMessage<::trader::EvaluationResult_Period>(Arena*);
template<> ::trader::ExecutionResult* Arena::CreateMaybeMessage<::trader::ExecutionResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace trader {

// ===================================================================

class ExecutionResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trader.ExecutionResult) */ {
 public:
  inline ExecutionResult() : ExecutionResult(nullptr) {}
  ~ExecutionResult() override;
  explicit PROTOBUF_CONSTEXPR ExecutionResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExecutionResult(const ExecutionResult& from);
  ExecutionResult(ExecutionResult&& from) noexcept
    : ExecutionResult() {
    *this = ::std::move(from);
  }

  inline ExecutionResult& operator=(const ExecutionResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecutionResult& operator=(ExecutionResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExecutionResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecutionResult* internal_default_instance() {
    return reinterpret_cast<const ExecutionResult*>(
               &_ExecutionResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ExecutionResult& a, ExecutionResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecutionResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecutionResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExecutionResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExecutionResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExecutionResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExecutionResult& from) {
    ExecutionResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecutionResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trader.ExecutionResult";
  }
  protected:
  explicit ExecutionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartBaseBalanceFieldNumber = 1,
    kStartQuoteBalanceFieldNumber = 2,
    kEndBaseBalanceFieldNumber = 3,
    kEndQuoteBalanceFieldNumber = 4,
    kStartPriceFieldNumber = 5,
    kEndPriceFieldNumber = 6,
    kStartValueFieldNumber = 7,
    kEndValueFieldNumber = 8,
    kTotalExecutedOrdersFieldNumber = 9,
    kTotalFeeFieldNumber = 10,
    kBaseVolatilityFieldNumber = 11,
    kTraderVolatilityFieldNumber = 12,
  };
  // optional float start_base_balance = 1;
  bool has_start_base_balance() const;
  private:
  bool _internal_has_start_base_balance() const;
  public:
  void clear_start_base_balance();
  float start_base_balance() const;
  void set_start_base_balance(float value);
  private:
  float _internal_start_base_balance() const;
  void _internal_set_start_base_balance(float value);
  public:

  // optional float start_quote_balance = 2;
  bool has_start_quote_balance() const;
  private:
  bool _internal_has_start_quote_balance() const;
  public:
  void clear_start_quote_balance();
  float start_quote_balance() const;
  void set_start_quote_balance(float value);
  private:
  float _internal_start_quote_balance() const;
  void _internal_set_start_quote_balance(float value);
  public:

  // optional float end_base_balance = 3;
  bool has_end_base_balance() const;
  private:
  bool _internal_has_end_base_balance() const;
  public:
  void clear_end_base_balance();
  float end_base_balance() const;
  void set_end_base_balance(float value);
  private:
  float _internal_end_base_balance() const;
  void _internal_set_end_base_balance(float value);
  public:

  // optional float end_quote_balance = 4;
  bool has_end_quote_balance() const;
  private:
  bool _internal_has_end_quote_balance() const;
  public:
  void clear_end_quote_balance();
  float end_quote_balance() const;
  void set_end_quote_balance(float value);
  private:
  float _internal_end_quote_balance() const;
  void _internal_set_end_quote_balance(float value);
  public:

  // optional float start_price = 5;
  bool has_start_price() const;
  private:
  bool _internal_has_start_price() const;
  public:
  void clear_start_price();
  float start_price() const;
  void set_start_price(float value);
  private:
  float _internal_start_price() const;
  void _internal_set_start_price(float value);
  public:

  // optional float end_price = 6;
  bool has_end_price() const;
  private:
  bool _internal_has_end_price() const;
  public:
  void clear_end_price();
  float end_price() const;
  void set_end_price(float value);
  private:
  float _internal_end_price() const;
  void _internal_set_end_price(float value);
  public:

  // optional float start_value = 7;
  bool has_start_value() const;
  private:
  bool _internal_has_start_value() const;
  public:
  void clear_start_value();
  float start_value() const;
  void set_start_value(float value);
  private:
  float _internal_start_value() const;
  void _internal_set_start_value(float value);
  public:

  // optional float end_value = 8;
  bool has_end_value() const;
  private:
  bool _internal_has_end_value() const;
  public:
  void clear_end_value();
  float end_value() const;
  void set_end_value(float value);
  private:
  float _internal_end_value() const;
  void _internal_set_end_value(float value);
  public:

  // optional int32 total_executed_orders = 9;
  bool has_total_executed_orders() const;
  private:
  bool _internal_has_total_executed_orders() const;
  public:
  void clear_total_executed_orders();
  int32_t total_executed_orders() const;
  void set_total_executed_orders(int32_t value);
  private:
  int32_t _internal_total_executed_orders() const;
  void _internal_set_total_executed_orders(int32_t value);
  public:

  // optional float total_fee = 10;
  bool has_total_fee() const;
  private:
  bool _internal_has_total_fee() const;
  public:
  void clear_total_fee();
  float total_fee() const;
  void set_total_fee(float value);
  private:
  float _internal_total_fee() const;
  void _internal_set_total_fee(float value);
  public:

  // optional float base_volatility = 11;
  bool has_base_volatility() const;
  private:
  bool _internal_has_base_volatility() const;
  public:
  void clear_base_volatility();
  float base_volatility() const;
  void set_base_volatility(float value);
  private:
  float _internal_base_volatility() const;
  void _internal_set_base_volatility(float value);
  public:

  // optional float trader_volatility = 12;
  bool has_trader_volatility() const;
  private:
  bool _internal_has_trader_volatility() const;
  public:
  void clear_trader_volatility();
  float trader_volatility() const;
  void set_trader_volatility(float value);
  private:
  float _internal_trader_volatility() const;
  void _internal_set_trader_volatility(float value);
  public:

  // @@protoc_insertion_point(class_scope:trader.ExecutionResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float start_base_balance_;
    float start_quote_balance_;
    float end_base_balance_;
    float end_quote_balance_;
    float start_price_;
    float end_price_;
    float start_value_;
    float end_value_;
    int32_t total_executed_orders_;
    float total_fee_;
    float base_volatility_;
    float trader_volatility_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_eval_2feval_2eproto;
};
// -------------------------------------------------------------------

class EvaluationConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trader.EvaluationConfig) */ {
 public:
  inline EvaluationConfig() : EvaluationConfig(nullptr) {}
  ~EvaluationConfig() override;
  explicit PROTOBUF_CONSTEXPR EvaluationConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EvaluationConfig(const EvaluationConfig& from);
  EvaluationConfig(EvaluationConfig&& from) noexcept
    : EvaluationConfig() {
    *this = ::std::move(from);
  }

  inline EvaluationConfig& operator=(const EvaluationConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline EvaluationConfig& operator=(EvaluationConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EvaluationConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const EvaluationConfig* internal_default_instance() {
    return reinterpret_cast<const EvaluationConfig*>(
               &_EvaluationConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EvaluationConfig& a, EvaluationConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(EvaluationConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EvaluationConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EvaluationConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EvaluationConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EvaluationConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EvaluationConfig& from) {
    EvaluationConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EvaluationConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trader.EvaluationConfig";
  }
  protected:
  explicit EvaluationConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartTimestampSecFieldNumber = 1,
    kEndTimestampSecFieldNumber = 2,
    kEvaluationPeriodMonthsFieldNumber = 3,
    kFastEvalFieldNumber = 4,
  };
  // optional int64 start_timestamp_sec = 1;
  bool has_start_timestamp_sec() const;
  private:
  bool _internal_has_start_timestamp_sec() const;
  public:
  void clear_start_timestamp_sec();
  int64_t start_timestamp_sec() const;
  void set_start_timestamp_sec(int64_t value);
  private:
  int64_t _internal_start_timestamp_sec() const;
  void _internal_set_start_timestamp_sec(int64_t value);
  public:

  // optional int64 end_timestamp_sec = 2;
  bool has_end_timestamp_sec() const;
  private:
  bool _internal_has_end_timestamp_sec() const;
  public:
  void clear_end_timestamp_sec();
  int64_t end_timestamp_sec() const;
  void set_end_timestamp_sec(int64_t value);
  private:
  int64_t _internal_end_timestamp_sec() const;
  void _internal_set_end_timestamp_sec(int64_t value);
  public:

  // optional int32 evaluation_period_months = 3;
  bool has_evaluation_period_months() const;
  private:
  bool _internal_has_evaluation_period_months() const;
  public:
  void clear_evaluation_period_months();
  int32_t evaluation_period_months() const;
  void set_evaluation_period_months(int32_t value);
  private:
  int32_t _internal_evaluation_period_months() const;
  void _internal_set_evaluation_period_months(int32_t value);
  public:

  // optional bool fast_eval = 4;
  bool has_fast_eval() const;
  private:
  bool _internal_has_fast_eval() const;
  public:
  void clear_fast_eval();
  bool fast_eval() const;
  void set_fast_eval(bool value);
  private:
  bool _internal_fast_eval() const;
  void _internal_set_fast_eval(bool value);
  public:

  // @@protoc_insertion_point(class_scope:trader.EvaluationConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int64_t start_timestamp_sec_;
    int64_t end_timestamp_sec_;
    int32_t evaluation_period_months_;
    bool fast_eval_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_eval_2feval_2eproto;
};
// -------------------------------------------------------------------

class EvaluationResult_Period final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trader.EvaluationResult.Period) */ {
 public:
  inline EvaluationResult_Period() : EvaluationResult_Period(nullptr) {}
  ~EvaluationResult_Period() override;
  explicit PROTOBUF_CONSTEXPR EvaluationResult_Period(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EvaluationResult_Period(const EvaluationResult_Period& from);
  EvaluationResult_Period(EvaluationResult_Period&& from) noexcept
    : EvaluationResult_Period() {
    *this = ::std::move(from);
  }

  inline EvaluationResult_Period& operator=(const EvaluationResult_Period& from) {
    CopyFrom(from);
    return *this;
  }
  inline EvaluationResult_Period& operator=(EvaluationResult_Period&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EvaluationResult_Period& default_instance() {
    return *internal_default_instance();
  }
  static inline const EvaluationResult_Period* internal_default_instance() {
    return reinterpret_cast<const EvaluationResult_Period*>(
               &_EvaluationResult_Period_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EvaluationResult_Period& a, EvaluationResult_Period& b) {
    a.Swap(&b);
  }
  inline void Swap(EvaluationResult_Period* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EvaluationResult_Period* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EvaluationResult_Period* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EvaluationResult_Period>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EvaluationResult_Period& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EvaluationResult_Period& from) {
    EvaluationResult_Period::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EvaluationResult_Period* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trader.EvaluationResult.Period";
  }
  protected:
  explicit EvaluationResult_Period(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 3,
    kStartTimestampSecFieldNumber = 1,
    kEndTimestampSecFieldNumber = 2,
    kFinalGainFieldNumber = 4,
    kBaseFinalGainFieldNumber = 5,
  };
  // optional .trader.ExecutionResult result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::trader::ExecutionResult& result() const;
  PROTOBUF_NODISCARD ::trader::ExecutionResult* release_result();
  ::trader::ExecutionResult* mutable_result();
  void set_allocated_result(::trader::ExecutionResult* result);
  private:
  const ::trader::ExecutionResult& _internal_result() const;
  ::trader::ExecutionResult* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::trader::ExecutionResult* result);
  ::trader::ExecutionResult* unsafe_arena_release_result();

  // optional int64 start_timestamp_sec = 1;
  bool has_start_timestamp_sec() const;
  private:
  bool _internal_has_start_timestamp_sec() const;
  public:
  void clear_start_timestamp_sec();
  int64_t start_timestamp_sec() const;
  void set_start_timestamp_sec(int64_t value);
  private:
  int64_t _internal_start_timestamp_sec() const;
  void _internal_set_start_timestamp_sec(int64_t value);
  public:

  // optional int64 end_timestamp_sec = 2;
  bool has_end_timestamp_sec() const;
  private:
  bool _internal_has_end_timestamp_sec() const;
  public:
  void clear_end_timestamp_sec();
  int64_t end_timestamp_sec() const;
  void set_end_timestamp_sec(int64_t value);
  private:
  int64_t _internal_end_timestamp_sec() const;
  void _internal_set_end_timestamp_sec(int64_t value);
  public:

  // optional float final_gain = 4;
  bool has_final_gain() const;
  private:
  bool _internal_has_final_gain() const;
  public:
  void clear_final_gain();
  float final_gain() const;
  void set_final_gain(float value);
  private:
  float _internal_final_gain() const;
  void _internal_set_final_gain(float value);
  public:

  // optional float base_final_gain = 5;
  bool has_base_final_gain() const;
  private:
  bool _internal_has_base_final_gain() const;
  public:
  void clear_base_final_gain();
  float base_final_gain() const;
  void set_base_final_gain(float value);
  private:
  float _internal_base_final_gain() const;
  void _internal_set_base_final_gain(float value);
  public:

  // @@protoc_insertion_point(class_scope:trader.EvaluationResult.Period)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::trader::ExecutionResult* result_;
    int64_t start_timestamp_sec_;
    int64_t end_timestamp_sec_;
    float final_gain_;
    float base_final_gain_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_eval_2feval_2eproto;
};
// -------------------------------------------------------------------

class EvaluationResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trader.EvaluationResult) */ {
 public:
  inline EvaluationResult() : EvaluationResult(nullptr) {}
  ~EvaluationResult() override;
  explicit PROTOBUF_CONSTEXPR EvaluationResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EvaluationResult(const EvaluationResult& from);
  EvaluationResult(EvaluationResult&& from) noexcept
    : EvaluationResult() {
    *this = ::std::move(from);
  }

  inline EvaluationResult& operator=(const EvaluationResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline EvaluationResult& operator=(EvaluationResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EvaluationResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const EvaluationResult* internal_default_instance() {
    return reinterpret_cast<const EvaluationResult*>(
               &_EvaluationResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EvaluationResult& a, EvaluationResult& b) {
    a.Swap(&b);
  }
  inline void Swap(EvaluationResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EvaluationResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EvaluationResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EvaluationResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EvaluationResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EvaluationResult& from) {
    EvaluationResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EvaluationResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trader.EvaluationResult";
  }
  protected:
  explicit EvaluationResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EvaluationResult_Period Period;

  // accessors -------------------------------------------------------

  enum : int {
    kPeriodFieldNumber = 4,
    kNameFieldNumber = 3,
    kAccountConfigFieldNumber = 1,
    kEvalConfigFieldNumber = 2,
    kScoreFieldNumber = 5,
    kAvgGainFieldNumber = 6,
    kAvgBaseGainFieldNumber = 7,
    kAvgTotalExecutedOrdersFieldNumber = 8,
    kAvgTotalFeeFieldNumber = 9,
  };
  // repeated .trader.EvaluationResult.Period period = 4;
  int period_size() const;
  private:
  int _internal_period_size() const;
  public:
  void clear_period();
  ::trader::EvaluationResult_Period* mutable_period(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trader::EvaluationResult_Period >*
      mutable_period();
  private:
  const ::trader::EvaluationResult_Period& _internal_period(int index) const;
  ::trader::EvaluationResult_Period* _internal_add_period();
  public:
  const ::trader::EvaluationResult_Period& period(int index) const;
  ::trader::EvaluationResult_Period* add_period();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trader::EvaluationResult_Period >&
      period() const;

  // optional string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .trader.AccountConfig account_config = 1;
  bool has_account_config() const;
  private:
  bool _internal_has_account_config() const;
  public:
  void clear_account_config();
  const ::trader::AccountConfig& account_config() const;
  PROTOBUF_NODISCARD ::trader::AccountConfig* release_account_config();
  ::trader::AccountConfig* mutable_account_config();
  void set_allocated_account_config(::trader::AccountConfig* account_config);
  private:
  const ::trader::AccountConfig& _internal_account_config() const;
  ::trader::AccountConfig* _internal_mutable_account_config();
  public:
  void unsafe_arena_set_allocated_account_config(
      ::trader::AccountConfig* account_config);
  ::trader::AccountConfig* unsafe_arena_release_account_config();

  // optional .trader.EvaluationConfig eval_config = 2;
  bool has_eval_config() const;
  private:
  bool _internal_has_eval_config() const;
  public:
  void clear_eval_config();
  const ::trader::EvaluationConfig& eval_config() const;
  PROTOBUF_NODISCARD ::trader::EvaluationConfig* release_eval_config();
  ::trader::EvaluationConfig* mutable_eval_config();
  void set_allocated_eval_config(::trader::EvaluationConfig* eval_config);
  private:
  const ::trader::EvaluationConfig& _internal_eval_config() const;
  ::trader::EvaluationConfig* _internal_mutable_eval_config();
  public:
  void unsafe_arena_set_allocated_eval_config(
      ::trader::EvaluationConfig* eval_config);
  ::trader::EvaluationConfig* unsafe_arena_release_eval_config();

  // optional float score = 5;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // optional float avg_gain = 6;
  bool has_avg_gain() const;
  private:
  bool _internal_has_avg_gain() const;
  public:
  void clear_avg_gain();
  float avg_gain() const;
  void set_avg_gain(float value);
  private:
  float _internal_avg_gain() const;
  void _internal_set_avg_gain(float value);
  public:

  // optional float avg_base_gain = 7;
  bool has_avg_base_gain() const;
  private:
  bool _internal_has_avg_base_gain() const;
  public:
  void clear_avg_base_gain();
  float avg_base_gain() const;
  void set_avg_base_gain(float value);
  private:
  float _internal_avg_base_gain() const;
  void _internal_set_avg_base_gain(float value);
  public:

  // optional float avg_total_executed_orders = 8;
  bool has_avg_total_executed_orders() const;
  private:
  bool _internal_has_avg_total_executed_orders() const;
  public:
  void clear_avg_total_executed_orders();
  float avg_total_executed_orders() const;
  void set_avg_total_executed_orders(float value);
  private:
  float _internal_avg_total_executed_orders() const;
  void _internal_set_avg_total_executed_orders(float value);
  public:

  // optional float avg_total_fee = 9;
  bool has_avg_total_fee() const;
  private:
  bool _internal_has_avg_total_fee() const;
  public:
  void clear_avg_total_fee();
  float avg_total_fee() const;
  void set_avg_total_fee(float value);
  private:
  float _internal_avg_total_fee() const;
  void _internal_set_avg_total_fee(float value);
  public:

  // @@protoc_insertion_point(class_scope:trader.EvaluationResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trader::EvaluationResult_Period > period_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::trader::AccountConfig* account_config_;
    ::trader::EvaluationConfig* eval_config_;
    float score_;
    float avg_gain_;
    float avg_base_gain_;
    float avg_total_executed_orders_;
    float avg_total_fee_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_eval_2feval_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ExecutionResult

// optional float start_base_balance = 1;
inline bool ExecutionResult::_internal_has_start_base_balance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ExecutionResult::has_start_base_balance() const {
  return _internal_has_start_base_balance();
}
inline void ExecutionResult::clear_start_base_balance() {
  _impl_.start_base_balance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float ExecutionResult::_internal_start_base_balance() const {
  return _impl_.start_base_balance_;
}
inline float ExecutionResult::start_base_balance() const {
  // @@protoc_insertion_point(field_get:trader.ExecutionResult.start_base_balance)
  return _internal_start_base_balance();
}
inline void ExecutionResult::_internal_set_start_base_balance(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.start_base_balance_ = value;
}
inline void ExecutionResult::set_start_base_balance(float value) {
  _internal_set_start_base_balance(value);
  // @@protoc_insertion_point(field_set:trader.ExecutionResult.start_base_balance)
}

// optional float start_quote_balance = 2;
inline bool ExecutionResult::_internal_has_start_quote_balance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ExecutionResult::has_start_quote_balance() const {
  return _internal_has_start_quote_balance();
}
inline void ExecutionResult::clear_start_quote_balance() {
  _impl_.start_quote_balance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float ExecutionResult::_internal_start_quote_balance() const {
  return _impl_.start_quote_balance_;
}
inline float ExecutionResult::start_quote_balance() const {
  // @@protoc_insertion_point(field_get:trader.ExecutionResult.start_quote_balance)
  return _internal_start_quote_balance();
}
inline void ExecutionResult::_internal_set_start_quote_balance(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.start_quote_balance_ = value;
}
inline void ExecutionResult::set_start_quote_balance(float value) {
  _internal_set_start_quote_balance(value);
  // @@protoc_insertion_point(field_set:trader.ExecutionResult.start_quote_balance)
}

// optional float end_base_balance = 3;
inline bool ExecutionResult::_internal_has_end_base_balance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ExecutionResult::has_end_base_balance() const {
  return _internal_has_end_base_balance();
}
inline void ExecutionResult::clear_end_base_balance() {
  _impl_.end_base_balance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float ExecutionResult::_internal_end_base_balance() const {
  return _impl_.end_base_balance_;
}
inline float ExecutionResult::end_base_balance() const {
  // @@protoc_insertion_point(field_get:trader.ExecutionResult.end_base_balance)
  return _internal_end_base_balance();
}
inline void ExecutionResult::_internal_set_end_base_balance(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.end_base_balance_ = value;
}
inline void ExecutionResult::set_end_base_balance(float value) {
  _internal_set_end_base_balance(value);
  // @@protoc_insertion_point(field_set:trader.ExecutionResult.end_base_balance)
}

// optional float end_quote_balance = 4;
inline bool ExecutionResult::_internal_has_end_quote_balance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ExecutionResult::has_end_quote_balance() const {
  return _internal_has_end_quote_balance();
}
inline void ExecutionResult::clear_end_quote_balance() {
  _impl_.end_quote_balance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float ExecutionResult::_internal_end_quote_balance() const {
  return _impl_.end_quote_balance_;
}
inline float ExecutionResult::end_quote_balance() const {
  // @@protoc_insertion_point(field_get:trader.ExecutionResult.end_quote_balance)
  return _internal_end_quote_balance();
}
inline void ExecutionResult::_internal_set_end_quote_balance(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.end_quote_balance_ = value;
}
inline void ExecutionResult::set_end_quote_balance(float value) {
  _internal_set_end_quote_balance(value);
  // @@protoc_insertion_point(field_set:trader.ExecutionResult.end_quote_balance)
}

// optional float start_price = 5;
inline bool ExecutionResult::_internal_has_start_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ExecutionResult::has_start_price() const {
  return _internal_has_start_price();
}
inline void ExecutionResult::clear_start_price() {
  _impl_.start_price_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float ExecutionResult::_internal_start_price() const {
  return _impl_.start_price_;
}
inline float ExecutionResult::start_price() const {
  // @@protoc_insertion_point(field_get:trader.ExecutionResult.start_price)
  return _internal_start_price();
}
inline void ExecutionResult::_internal_set_start_price(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.start_price_ = value;
}
inline void ExecutionResult::set_start_price(float value) {
  _internal_set_start_price(value);
  // @@protoc_insertion_point(field_set:trader.ExecutionResult.start_price)
}

// optional float end_price = 6;
inline bool ExecutionResult::_internal_has_end_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ExecutionResult::has_end_price() const {
  return _internal_has_end_price();
}
inline void ExecutionResult::clear_end_price() {
  _impl_.end_price_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float ExecutionResult::_internal_end_price() const {
  return _impl_.end_price_;
}
inline float ExecutionResult::end_price() const {
  // @@protoc_insertion_point(field_get:trader.ExecutionResult.end_price)
  return _internal_end_price();
}
inline void ExecutionResult::_internal_set_end_price(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.end_price_ = value;
}
inline void ExecutionResult::set_end_price(float value) {
  _internal_set_end_price(value);
  // @@protoc_insertion_point(field_set:trader.ExecutionResult.end_price)
}

// optional float start_value = 7;
inline bool ExecutionResult::_internal_has_start_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ExecutionResult::has_start_value() const {
  return _internal_has_start_value();
}
inline void ExecutionResult::clear_start_value() {
  _impl_.start_value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float ExecutionResult::_internal_start_value() const {
  return _impl_.start_value_;
}
inline float ExecutionResult::start_value() const {
  // @@protoc_insertion_point(field_get:trader.ExecutionResult.start_value)
  return _internal_start_value();
}
inline void ExecutionResult::_internal_set_start_value(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.start_value_ = value;
}
inline void ExecutionResult::set_start_value(float value) {
  _internal_set_start_value(value);
  // @@protoc_insertion_point(field_set:trader.ExecutionResult.start_value)
}

// optional float end_value = 8;
inline bool ExecutionResult::_internal_has_end_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ExecutionResult::has_end_value() const {
  return _internal_has_end_value();
}
inline void ExecutionResult::clear_end_value() {
  _impl_.end_value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float ExecutionResult::_internal_end_value() const {
  return _impl_.end_value_;
}
inline float ExecutionResult::end_value() const {
  // @@protoc_insertion_point(field_get:trader.ExecutionResult.end_value)
  return _internal_end_value();
}
inline void ExecutionResult::_internal_set_end_value(float value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.end_value_ = value;
}
inline void ExecutionResult::set_end_value(float value) {
  _internal_set_end_value(value);
  // @@protoc_insertion_point(field_set:trader.ExecutionResult.end_value)
}

// optional int32 total_executed_orders = 9;
inline bool ExecutionResult::_internal_has_total_executed_orders() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ExecutionResult::has_total_executed_orders() const {
  return _internal_has_total_executed_orders();
}
inline void ExecutionResult::clear_total_executed_orders() {
  _impl_.total_executed_orders_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int32_t ExecutionResult::_internal_total_executed_orders() const {
  return _impl_.total_executed_orders_;
}
inline int32_t ExecutionResult::total_executed_orders() const {
  // @@protoc_insertion_point(field_get:trader.ExecutionResult.total_executed_orders)
  return _internal_total_executed_orders();
}
inline void ExecutionResult::_internal_set_total_executed_orders(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.total_executed_orders_ = value;
}
inline void ExecutionResult::set_total_executed_orders(int32_t value) {
  _internal_set_total_executed_orders(value);
  // @@protoc_insertion_point(field_set:trader.ExecutionResult.total_executed_orders)
}

// optional float total_fee = 10;
inline bool ExecutionResult::_internal_has_total_fee() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ExecutionResult::has_total_fee() const {
  return _internal_has_total_fee();
}
inline void ExecutionResult::clear_total_fee() {
  _impl_.total_fee_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline float ExecutionResult::_internal_total_fee() const {
  return _impl_.total_fee_;
}
inline float ExecutionResult::total_fee() const {
  // @@protoc_insertion_point(field_get:trader.ExecutionResult.total_fee)
  return _internal_total_fee();
}
inline void ExecutionResult::_internal_set_total_fee(float value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.total_fee_ = value;
}
inline void ExecutionResult::set_total_fee(float value) {
  _internal_set_total_fee(value);
  // @@protoc_insertion_point(field_set:trader.ExecutionResult.total_fee)
}

// optional float base_volatility = 11;
inline bool ExecutionResult::_internal_has_base_volatility() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ExecutionResult::has_base_volatility() const {
  return _internal_has_base_volatility();
}
inline void ExecutionResult::clear_base_volatility() {
  _impl_.base_volatility_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline float ExecutionResult::_internal_base_volatility() const {
  return _impl_.base_volatility_;
}
inline float ExecutionResult::base_volatility() const {
  // @@protoc_insertion_point(field_get:trader.ExecutionResult.base_volatility)
  return _internal_base_volatility();
}
inline void ExecutionResult::_internal_set_base_volatility(float value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.base_volatility_ = value;
}
inline void ExecutionResult::set_base_volatility(float value) {
  _internal_set_base_volatility(value);
  // @@protoc_insertion_point(field_set:trader.ExecutionResult.base_volatility)
}

// optional float trader_volatility = 12;
inline bool ExecutionResult::_internal_has_trader_volatility() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ExecutionResult::has_trader_volatility() const {
  return _internal_has_trader_volatility();
}
inline void ExecutionResult::clear_trader_volatility() {
  _impl_.trader_volatility_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline float ExecutionResult::_internal_trader_volatility() const {
  return _impl_.trader_volatility_;
}
inline float ExecutionResult::trader_volatility() const {
  // @@protoc_insertion_point(field_get:trader.ExecutionResult.trader_volatility)
  return _internal_trader_volatility();
}
inline void ExecutionResult::_internal_set_trader_volatility(float value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.trader_volatility_ = value;
}
inline void ExecutionResult::set_trader_volatility(float value) {
  _internal_set_trader_volatility(value);
  // @@protoc_insertion_point(field_set:trader.ExecutionResult.trader_volatility)
}

// -------------------------------------------------------------------

// EvaluationConfig

// optional int64 start_timestamp_sec = 1;
inline bool EvaluationConfig::_internal_has_start_timestamp_sec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EvaluationConfig::has_start_timestamp_sec() const {
  return _internal_has_start_timestamp_sec();
}
inline void EvaluationConfig::clear_start_timestamp_sec() {
  _impl_.start_timestamp_sec_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t EvaluationConfig::_internal_start_timestamp_sec() const {
  return _impl_.start_timestamp_sec_;
}
inline int64_t EvaluationConfig::start_timestamp_sec() const {
  // @@protoc_insertion_point(field_get:trader.EvaluationConfig.start_timestamp_sec)
  return _internal_start_timestamp_sec();
}
inline void EvaluationConfig::_internal_set_start_timestamp_sec(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.start_timestamp_sec_ = value;
}
inline void EvaluationConfig::set_start_timestamp_sec(int64_t value) {
  _internal_set_start_timestamp_sec(value);
  // @@protoc_insertion_point(field_set:trader.EvaluationConfig.start_timestamp_sec)
}

// optional int64 end_timestamp_sec = 2;
inline bool EvaluationConfig::_internal_has_end_timestamp_sec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EvaluationConfig::has_end_timestamp_sec() const {
  return _internal_has_end_timestamp_sec();
}
inline void EvaluationConfig::clear_end_timestamp_sec() {
  _impl_.end_timestamp_sec_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t EvaluationConfig::_internal_end_timestamp_sec() const {
  return _impl_.end_timestamp_sec_;
}
inline int64_t EvaluationConfig::end_timestamp_sec() const {
  // @@protoc_insertion_point(field_get:trader.EvaluationConfig.end_timestamp_sec)
  return _internal_end_timestamp_sec();
}
inline void EvaluationConfig::_internal_set_end_timestamp_sec(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.end_timestamp_sec_ = value;
}
inline void EvaluationConfig::set_end_timestamp_sec(int64_t value) {
  _internal_set_end_timestamp_sec(value);
  // @@protoc_insertion_point(field_set:trader.EvaluationConfig.end_timestamp_sec)
}

// optional int32 evaluation_period_months = 3;
inline bool EvaluationConfig::_internal_has_evaluation_period_months() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool EvaluationConfig::has_evaluation_period_months() const {
  return _internal_has_evaluation_period_months();
}
inline void EvaluationConfig::clear_evaluation_period_months() {
  _impl_.evaluation_period_months_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t EvaluationConfig::_internal_evaluation_period_months() const {
  return _impl_.evaluation_period_months_;
}
inline int32_t EvaluationConfig::evaluation_period_months() const {
  // @@protoc_insertion_point(field_get:trader.EvaluationConfig.evaluation_period_months)
  return _internal_evaluation_period_months();
}
inline void EvaluationConfig::_internal_set_evaluation_period_months(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.evaluation_period_months_ = value;
}
inline void EvaluationConfig::set_evaluation_period_months(int32_t value) {
  _internal_set_evaluation_period_months(value);
  // @@protoc_insertion_point(field_set:trader.EvaluationConfig.evaluation_period_months)
}

// optional bool fast_eval = 4;
inline bool EvaluationConfig::_internal_has_fast_eval() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool EvaluationConfig::has_fast_eval() const {
  return _internal_has_fast_eval();
}
inline void EvaluationConfig::clear_fast_eval() {
  _impl_.fast_eval_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool EvaluationConfig::_internal_fast_eval() const {
  return _impl_.fast_eval_;
}
inline bool EvaluationConfig::fast_eval() const {
  // @@protoc_insertion_point(field_get:trader.EvaluationConfig.fast_eval)
  return _internal_fast_eval();
}
inline void EvaluationConfig::_internal_set_fast_eval(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.fast_eval_ = value;
}
inline void EvaluationConfig::set_fast_eval(bool value) {
  _internal_set_fast_eval(value);
  // @@protoc_insertion_point(field_set:trader.EvaluationConfig.fast_eval)
}

// -------------------------------------------------------------------

// EvaluationResult_Period

// optional int64 start_timestamp_sec = 1;
inline bool EvaluationResult_Period::_internal_has_start_timestamp_sec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EvaluationResult_Period::has_start_timestamp_sec() const {
  return _internal_has_start_timestamp_sec();
}
inline void EvaluationResult_Period::clear_start_timestamp_sec() {
  _impl_.start_timestamp_sec_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t EvaluationResult_Period::_internal_start_timestamp_sec() const {
  return _impl_.start_timestamp_sec_;
}
inline int64_t EvaluationResult_Period::start_timestamp_sec() const {
  // @@protoc_insertion_point(field_get:trader.EvaluationResult.Period.start_timestamp_sec)
  return _internal_start_timestamp_sec();
}
inline void EvaluationResult_Period::_internal_set_start_timestamp_sec(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.start_timestamp_sec_ = value;
}
inline void EvaluationResult_Period::set_start_timestamp_sec(int64_t value) {
  _internal_set_start_timestamp_sec(value);
  // @@protoc_insertion_point(field_set:trader.EvaluationResult.Period.start_timestamp_sec)
}

// optional int64 end_timestamp_sec = 2;
inline bool EvaluationResult_Period::_internal_has_end_timestamp_sec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool EvaluationResult_Period::has_end_timestamp_sec() const {
  return _internal_has_end_timestamp_sec();
}
inline void EvaluationResult_Period::clear_end_timestamp_sec() {
  _impl_.end_timestamp_sec_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int64_t EvaluationResult_Period::_internal_end_timestamp_sec() const {
  return _impl_.end_timestamp_sec_;
}
inline int64_t EvaluationResult_Period::end_timestamp_sec() const {
  // @@protoc_insertion_point(field_get:trader.EvaluationResult.Period.end_timestamp_sec)
  return _internal_end_timestamp_sec();
}
inline void EvaluationResult_Period::_internal_set_end_timestamp_sec(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.end_timestamp_sec_ = value;
}
inline void EvaluationResult_Period::set_end_timestamp_sec(int64_t value) {
  _internal_set_end_timestamp_sec(value);
  // @@protoc_insertion_point(field_set:trader.EvaluationResult.Period.end_timestamp_sec)
}

// optional .trader.ExecutionResult result = 3;
inline bool EvaluationResult_Period::_internal_has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline bool EvaluationResult_Period::has_result() const {
  return _internal_has_result();
}
inline void EvaluationResult_Period::clear_result() {
  if (_impl_.result_ != nullptr) _impl_.result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::trader::ExecutionResult& EvaluationResult_Period::_internal_result() const {
  const ::trader::ExecutionResult* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::trader::ExecutionResult&>(
      ::trader::_ExecutionResult_default_instance_);
}
inline const ::trader::ExecutionResult& EvaluationResult_Period::result() const {
  // @@protoc_insertion_point(field_get:trader.EvaluationResult.Period.result)
  return _internal_result();
}
inline void EvaluationResult_Period::unsafe_arena_set_allocated_result(
    ::trader::ExecutionResult* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = result;
  if (result) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trader.EvaluationResult.Period.result)
}
inline ::trader::ExecutionResult* EvaluationResult_Period::release_result() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::trader::ExecutionResult* temp = _impl_.result_;
  _impl_.result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::trader::ExecutionResult* EvaluationResult_Period::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:trader.EvaluationResult.Period.result)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::trader::ExecutionResult* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::trader::ExecutionResult* EvaluationResult_Period::_internal_mutable_result() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.result_ == nullptr) {
    auto* p = CreateMaybeMessage<::trader::ExecutionResult>(GetArenaForAllocation());
    _impl_.result_ = p;
  }
  return _impl_.result_;
}
inline ::trader::ExecutionResult* EvaluationResult_Period::mutable_result() {
  ::trader::ExecutionResult* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:trader.EvaluationResult.Period.result)
  return _msg;
}
inline void EvaluationResult_Period::set_allocated_result(::trader::ExecutionResult* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.result_ = result;
  // @@protoc_insertion_point(field_set_allocated:trader.EvaluationResult.Period.result)
}

// optional float final_gain = 4;
inline bool EvaluationResult_Period::_internal_has_final_gain() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool EvaluationResult_Period::has_final_gain() const {
  return _internal_has_final_gain();
}
inline void EvaluationResult_Period::clear_final_gain() {
  _impl_.final_gain_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float EvaluationResult_Period::_internal_final_gain() const {
  return _impl_.final_gain_;
}
inline float EvaluationResult_Period::final_gain() const {
  // @@protoc_insertion_point(field_get:trader.EvaluationResult.Period.final_gain)
  return _internal_final_gain();
}
inline void EvaluationResult_Period::_internal_set_final_gain(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.final_gain_ = value;
}
inline void EvaluationResult_Period::set_final_gain(float value) {
  _internal_set_final_gain(value);
  // @@protoc_insertion_point(field_set:trader.EvaluationResult.Period.final_gain)
}

// optional float base_final_gain = 5;
inline bool EvaluationResult_Period::_internal_has_base_final_gain() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool EvaluationResult_Period::has_base_final_gain() const {
  return _internal_has_base_final_gain();
}
inline void EvaluationResult_Period::clear_base_final_gain() {
  _impl_.base_final_gain_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float EvaluationResult_Period::_internal_base_final_gain() const {
  return _impl_.base_final_gain_;
}
inline float EvaluationResult_Period::base_final_gain() const {
  // @@protoc_insertion_point(field_get:trader.EvaluationResult.Period.base_final_gain)
  return _internal_base_final_gain();
}
inline void EvaluationResult_Period::_internal_set_base_final_gain(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.base_final_gain_ = value;
}
inline void EvaluationResult_Period::set_base_final_gain(float value) {
  _internal_set_base_final_gain(value);
  // @@protoc_insertion_point(field_set:trader.EvaluationResult.Period.base_final_gain)
}

// -------------------------------------------------------------------

// EvaluationResult

// optional .trader.AccountConfig account_config = 1;
inline bool EvaluationResult::_internal_has_account_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.account_config_ != nullptr);
  return value;
}
inline bool EvaluationResult::has_account_config() const {
  return _internal_has_account_config();
}
inline const ::trader::AccountConfig& EvaluationResult::_internal_account_config() const {
  const ::trader::AccountConfig* p = _impl_.account_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::trader::AccountConfig&>(
      ::trader::_AccountConfig_default_instance_);
}
inline const ::trader::AccountConfig& EvaluationResult::account_config() const {
  // @@protoc_insertion_point(field_get:trader.EvaluationResult.account_config)
  return _internal_account_config();
}
inline void EvaluationResult::unsafe_arena_set_allocated_account_config(
    ::trader::AccountConfig* account_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.account_config_);
  }
  _impl_.account_config_ = account_config;
  if (account_config) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trader.EvaluationResult.account_config)
}
inline ::trader::AccountConfig* EvaluationResult::release_account_config() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::trader::AccountConfig* temp = _impl_.account_config_;
  _impl_.account_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::trader::AccountConfig* EvaluationResult::unsafe_arena_release_account_config() {
  // @@protoc_insertion_point(field_release:trader.EvaluationResult.account_config)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::trader::AccountConfig* temp = _impl_.account_config_;
  _impl_.account_config_ = nullptr;
  return temp;
}
inline ::trader::AccountConfig* EvaluationResult::_internal_mutable_account_config() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.account_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::trader::AccountConfig>(GetArenaForAllocation());
    _impl_.account_config_ = p;
  }
  return _impl_.account_config_;
}
inline ::trader::AccountConfig* EvaluationResult::mutable_account_config() {
  ::trader::AccountConfig* _msg = _internal_mutable_account_config();
  // @@protoc_insertion_point(field_mutable:trader.EvaluationResult.account_config)
  return _msg;
}
inline void EvaluationResult::set_allocated_account_config(::trader::AccountConfig* account_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.account_config_);
  }
  if (account_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_config));
    if (message_arena != submessage_arena) {
      account_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.account_config_ = account_config;
  // @@protoc_insertion_point(field_set_allocated:trader.EvaluationResult.account_config)
}

// optional .trader.EvaluationConfig eval_config = 2;
inline bool EvaluationResult::_internal_has_eval_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.eval_config_ != nullptr);
  return value;
}
inline bool EvaluationResult::has_eval_config() const {
  return _internal_has_eval_config();
}
inline void EvaluationResult::clear_eval_config() {
  if (_impl_.eval_config_ != nullptr) _impl_.eval_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::trader::EvaluationConfig& EvaluationResult::_internal_eval_config() const {
  const ::trader::EvaluationConfig* p = _impl_.eval_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::trader::EvaluationConfig&>(
      ::trader::_EvaluationConfig_default_instance_);
}
inline const ::trader::EvaluationConfig& EvaluationResult::eval_config() const {
  // @@protoc_insertion_point(field_get:trader.EvaluationResult.eval_config)
  return _internal_eval_config();
}
inline void EvaluationResult::unsafe_arena_set_allocated_eval_config(
    ::trader::EvaluationConfig* eval_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.eval_config_);
  }
  _impl_.eval_config_ = eval_config;
  if (eval_config) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:trader.EvaluationResult.eval_config)
}
inline ::trader::EvaluationConfig* EvaluationResult::release_eval_config() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::trader::EvaluationConfig* temp = _impl_.eval_config_;
  _impl_.eval_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::trader::EvaluationConfig* EvaluationResult::unsafe_arena_release_eval_config() {
  // @@protoc_insertion_point(field_release:trader.EvaluationResult.eval_config)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::trader::EvaluationConfig* temp = _impl_.eval_config_;
  _impl_.eval_config_ = nullptr;
  return temp;
}
inline ::trader::EvaluationConfig* EvaluationResult::_internal_mutable_eval_config() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.eval_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::trader::EvaluationConfig>(GetArenaForAllocation());
    _impl_.eval_config_ = p;
  }
  return _impl_.eval_config_;
}
inline ::trader::EvaluationConfig* EvaluationResult::mutable_eval_config() {
  ::trader::EvaluationConfig* _msg = _internal_mutable_eval_config();
  // @@protoc_insertion_point(field_mutable:trader.EvaluationResult.eval_config)
  return _msg;
}
inline void EvaluationResult::set_allocated_eval_config(::trader::EvaluationConfig* eval_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.eval_config_;
  }
  if (eval_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(eval_config);
    if (message_arena != submessage_arena) {
      eval_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eval_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.eval_config_ = eval_config;
  // @@protoc_insertion_point(field_set_allocated:trader.EvaluationResult.eval_config)
}

// optional string name = 3;
inline bool EvaluationResult::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EvaluationResult::has_name() const {
  return _internal_has_name();
}
inline void EvaluationResult::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EvaluationResult::name() const {
  // @@protoc_insertion_point(field_get:trader.EvaluationResult.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EvaluationResult::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:trader.EvaluationResult.name)
}
inline std::string* EvaluationResult::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:trader.EvaluationResult.name)
  return _s;
}
inline const std::string& EvaluationResult::_internal_name() const {
  return _impl_.name_.Get();
}
inline void EvaluationResult::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* EvaluationResult::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* EvaluationResult::release_name() {
  // @@protoc_insertion_point(field_release:trader.EvaluationResult.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void EvaluationResult::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:trader.EvaluationResult.name)
}

// repeated .trader.EvaluationResult.Period period = 4;
inline int EvaluationResult::_internal_period_size() const {
  return _impl_.period_.size();
}
inline int EvaluationResult::period_size() const {
  return _internal_period_size();
}
inline void EvaluationResult::clear_period() {
  _impl_.period_.Clear();
}
inline ::trader::EvaluationResult_Period* EvaluationResult::mutable_period(int index) {
  // @@protoc_insertion_point(field_mutable:trader.EvaluationResult.period)
  return _impl_.period_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trader::EvaluationResult_Period >*
EvaluationResult::mutable_period() {
  // @@protoc_insertion_point(field_mutable_list:trader.EvaluationResult.period)
  return &_impl_.period_;
}
inline const ::trader::EvaluationResult_Period& EvaluationResult::_internal_period(int index) const {
  return _impl_.period_.Get(index);
}
inline const ::trader::EvaluationResult_Period& EvaluationResult::period(int index) const {
  // @@protoc_insertion_point(field_get:trader.EvaluationResult.period)
  return _internal_period(index);
}
inline ::trader::EvaluationResult_Period* EvaluationResult::_internal_add_period() {
  return _impl_.period_.Add();
}
inline ::trader::EvaluationResult_Period* EvaluationResult::add_period() {
  ::trader::EvaluationResult_Period* _add = _internal_add_period();
  // @@protoc_insertion_point(field_add:trader.EvaluationResult.period)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trader::EvaluationResult_Period >&
EvaluationResult::period() const {
  // @@protoc_insertion_point(field_list:trader.EvaluationResult.period)
  return _impl_.period_;
}

// optional float score = 5;
inline bool EvaluationResult::_internal_has_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool EvaluationResult::has_score() const {
  return _internal_has_score();
}
inline void EvaluationResult::clear_score() {
  _impl_.score_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float EvaluationResult::_internal_score() const {
  return _impl_.score_;
}
inline float EvaluationResult::score() const {
  // @@protoc_insertion_point(field_get:trader.EvaluationResult.score)
  return _internal_score();
}
inline void EvaluationResult::_internal_set_score(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.score_ = value;
}
inline void EvaluationResult::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:trader.EvaluationResult.score)
}

// optional float avg_gain = 6;
inline bool EvaluationResult::_internal_has_avg_gain() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool EvaluationResult::has_avg_gain() const {
  return _internal_has_avg_gain();
}
inline void EvaluationResult::clear_avg_gain() {
  _impl_.avg_gain_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float EvaluationResult::_internal_avg_gain() const {
  return _impl_.avg_gain_;
}
inline float EvaluationResult::avg_gain() const {
  // @@protoc_insertion_point(field_get:trader.EvaluationResult.avg_gain)
  return _internal_avg_gain();
}
inline void EvaluationResult::_internal_set_avg_gain(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.avg_gain_ = value;
}
inline void EvaluationResult::set_avg_gain(float value) {
  _internal_set_avg_gain(value);
  // @@protoc_insertion_point(field_set:trader.EvaluationResult.avg_gain)
}

// optional float avg_base_gain = 7;
inline bool EvaluationResult::_internal_has_avg_base_gain() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool EvaluationResult::has_avg_base_gain() const {
  return _internal_has_avg_base_gain();
}
inline void EvaluationResult::clear_avg_base_gain() {
  _impl_.avg_base_gain_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float EvaluationResult::_internal_avg_base_gain() const {
  return _impl_.avg_base_gain_;
}
inline float EvaluationResult::avg_base_gain() const {
  // @@protoc_insertion_point(field_get:trader.EvaluationResult.avg_base_gain)
  return _internal_avg_base_gain();
}
inline void EvaluationResult::_internal_set_avg_base_gain(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.avg_base_gain_ = value;
}
inline void EvaluationResult::set_avg_base_gain(float value) {
  _internal_set_avg_base_gain(value);
  // @@protoc_insertion_point(field_set:trader.EvaluationResult.avg_base_gain)
}

// optional float avg_total_executed_orders = 8;
inline bool EvaluationResult::_internal_has_avg_total_executed_orders() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool EvaluationResult::has_avg_total_executed_orders() const {
  return _internal_has_avg_total_executed_orders();
}
inline void EvaluationResult::clear_avg_total_executed_orders() {
  _impl_.avg_total_executed_orders_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float EvaluationResult::_internal_avg_total_executed_orders() const {
  return _impl_.avg_total_executed_orders_;
}
inline float EvaluationResult::avg_total_executed_orders() const {
  // @@protoc_insertion_point(field_get:trader.EvaluationResult.avg_total_executed_orders)
  return _internal_avg_total_executed_orders();
}
inline void EvaluationResult::_internal_set_avg_total_executed_orders(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.avg_total_executed_orders_ = value;
}
inline void EvaluationResult::set_avg_total_executed_orders(float value) {
  _internal_set_avg_total_executed_orders(value);
  // @@protoc_insertion_point(field_set:trader.EvaluationResult.avg_total_executed_orders)
}

// optional float avg_total_fee = 9;
inline bool EvaluationResult::_internal_has_avg_total_fee() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool EvaluationResult::has_avg_total_fee() const {
  return _internal_has_avg_total_fee();
}
inline void EvaluationResult::clear_avg_total_fee() {
  _impl_.avg_total_fee_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float EvaluationResult::_internal_avg_total_fee() const {
  return _impl_.avg_total_fee_;
}
inline float EvaluationResult::avg_total_fee() const {
  // @@protoc_insertion_point(field_get:trader.EvaluationResult.avg_total_fee)
  return _internal_avg_total_fee();
}
inline void EvaluationResult::_internal_set_avg_total_fee(float value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.avg_total_fee_ = value;
}
inline void EvaluationResult::set_avg_total_fee(float value) {
  _internal_set_avg_total_fee(value);
  // @@protoc_insertion_point(field_set:trader.EvaluationResult.avg_total_fee)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace trader

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_eval_2feval_2eproto
