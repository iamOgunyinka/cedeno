// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: eval/eval.proto

#include "eval/eval.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace trader {
PROTOBUF_CONSTEXPR ExecutionResult::ExecutionResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.start_base_balance_)*/0
  , /*decltype(_impl_.start_quote_balance_)*/0
  , /*decltype(_impl_.end_base_balance_)*/0
  , /*decltype(_impl_.end_quote_balance_)*/0
  , /*decltype(_impl_.start_price_)*/0
  , /*decltype(_impl_.end_price_)*/0
  , /*decltype(_impl_.start_value_)*/0
  , /*decltype(_impl_.end_value_)*/0
  , /*decltype(_impl_.total_executed_orders_)*/0
  , /*decltype(_impl_.total_fee_)*/0
  , /*decltype(_impl_.base_volatility_)*/0
  , /*decltype(_impl_.trader_volatility_)*/0} {}
struct ExecutionResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecutionResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecutionResultDefaultTypeInternal() {}
  union {
    ExecutionResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecutionResultDefaultTypeInternal _ExecutionResult_default_instance_;
PROTOBUF_CONSTEXPR EvaluationConfig::EvaluationConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.start_timestamp_sec_)*/int64_t{0}
  , /*decltype(_impl_.end_timestamp_sec_)*/int64_t{0}
  , /*decltype(_impl_.evaluation_period_months_)*/0
  , /*decltype(_impl_.fast_eval_)*/false} {}
struct EvaluationConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EvaluationConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EvaluationConfigDefaultTypeInternal() {}
  union {
    EvaluationConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EvaluationConfigDefaultTypeInternal _EvaluationConfig_default_instance_;
PROTOBUF_CONSTEXPR EvaluationResult_Period::EvaluationResult_Period(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.result_)*/nullptr
  , /*decltype(_impl_.start_timestamp_sec_)*/int64_t{0}
  , /*decltype(_impl_.end_timestamp_sec_)*/int64_t{0}
  , /*decltype(_impl_.final_gain_)*/0
  , /*decltype(_impl_.base_final_gain_)*/0} {}
struct EvaluationResult_PeriodDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EvaluationResult_PeriodDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EvaluationResult_PeriodDefaultTypeInternal() {}
  union {
    EvaluationResult_Period _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EvaluationResult_PeriodDefaultTypeInternal _EvaluationResult_Period_default_instance_;
PROTOBUF_CONSTEXPR EvaluationResult::EvaluationResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.period_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.account_config_)*/nullptr
  , /*decltype(_impl_.eval_config_)*/nullptr
  , /*decltype(_impl_.score_)*/0
  , /*decltype(_impl_.avg_gain_)*/0
  , /*decltype(_impl_.avg_base_gain_)*/0
  , /*decltype(_impl_.avg_total_executed_orders_)*/0
  , /*decltype(_impl_.avg_total_fee_)*/0} {}
struct EvaluationResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EvaluationResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EvaluationResultDefaultTypeInternal() {}
  union {
    EvaluationResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EvaluationResultDefaultTypeInternal _EvaluationResult_default_instance_;
}  // namespace trader
static ::_pb::Metadata file_level_metadata_eval_2feval_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_eval_2feval_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_eval_2feval_2eproto = nullptr;

const uint32_t TableStruct_eval_2feval_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::trader::ExecutionResult, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::trader::ExecutionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trader::ExecutionResult, _impl_.start_base_balance_),
  PROTOBUF_FIELD_OFFSET(::trader::ExecutionResult, _impl_.start_quote_balance_),
  PROTOBUF_FIELD_OFFSET(::trader::ExecutionResult, _impl_.end_base_balance_),
  PROTOBUF_FIELD_OFFSET(::trader::ExecutionResult, _impl_.end_quote_balance_),
  PROTOBUF_FIELD_OFFSET(::trader::ExecutionResult, _impl_.start_price_),
  PROTOBUF_FIELD_OFFSET(::trader::ExecutionResult, _impl_.end_price_),
  PROTOBUF_FIELD_OFFSET(::trader::ExecutionResult, _impl_.start_value_),
  PROTOBUF_FIELD_OFFSET(::trader::ExecutionResult, _impl_.end_value_),
  PROTOBUF_FIELD_OFFSET(::trader::ExecutionResult, _impl_.total_executed_orders_),
  PROTOBUF_FIELD_OFFSET(::trader::ExecutionResult, _impl_.total_fee_),
  PROTOBUF_FIELD_OFFSET(::trader::ExecutionResult, _impl_.base_volatility_),
  PROTOBUF_FIELD_OFFSET(::trader::ExecutionResult, _impl_.trader_volatility_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::trader::EvaluationConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::trader::EvaluationConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trader::EvaluationConfig, _impl_.start_timestamp_sec_),
  PROTOBUF_FIELD_OFFSET(::trader::EvaluationConfig, _impl_.end_timestamp_sec_),
  PROTOBUF_FIELD_OFFSET(::trader::EvaluationConfig, _impl_.evaluation_period_months_),
  PROTOBUF_FIELD_OFFSET(::trader::EvaluationConfig, _impl_.fast_eval_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::trader::EvaluationResult_Period, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::trader::EvaluationResult_Period, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trader::EvaluationResult_Period, _impl_.start_timestamp_sec_),
  PROTOBUF_FIELD_OFFSET(::trader::EvaluationResult_Period, _impl_.end_timestamp_sec_),
  PROTOBUF_FIELD_OFFSET(::trader::EvaluationResult_Period, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::trader::EvaluationResult_Period, _impl_.final_gain_),
  PROTOBUF_FIELD_OFFSET(::trader::EvaluationResult_Period, _impl_.base_final_gain_),
  1,
  2,
  0,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::trader::EvaluationResult, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::trader::EvaluationResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::trader::EvaluationResult, _impl_.account_config_),
  PROTOBUF_FIELD_OFFSET(::trader::EvaluationResult, _impl_.eval_config_),
  PROTOBUF_FIELD_OFFSET(::trader::EvaluationResult, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::trader::EvaluationResult, _impl_.period_),
  PROTOBUF_FIELD_OFFSET(::trader::EvaluationResult, _impl_.score_),
  PROTOBUF_FIELD_OFFSET(::trader::EvaluationResult, _impl_.avg_gain_),
  PROTOBUF_FIELD_OFFSET(::trader::EvaluationResult, _impl_.avg_base_gain_),
  PROTOBUF_FIELD_OFFSET(::trader::EvaluationResult, _impl_.avg_total_executed_orders_),
  PROTOBUF_FIELD_OFFSET(::trader::EvaluationResult, _impl_.avg_total_fee_),
  1,
  2,
  0,
  ~0u,
  3,
  4,
  5,
  6,
  7,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 18, -1, sizeof(::trader::ExecutionResult)},
  { 30, 40, -1, sizeof(::trader::EvaluationConfig)},
  { 44, 55, -1, sizeof(::trader::EvaluationResult_Period)},
  { 60, 75, -1, sizeof(::trader::EvaluationResult)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::trader::_ExecutionResult_default_instance_._instance,
  &::trader::_EvaluationConfig_default_instance_._instance,
  &::trader::_EvaluationResult_Period_default_instance_._instance,
  &::trader::_EvaluationResult_default_instance_._instance,
};

const char descriptor_table_protodef_eval_2feval_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017eval/eval.proto\022\006trader\032\017base/base.pro"
  "to\"\265\002\n\017ExecutionResult\022\032\n\022start_base_bal"
  "ance\030\001 \001(\002\022\033\n\023start_quote_balance\030\002 \001(\002\022"
  "\030\n\020end_base_balance\030\003 \001(\002\022\031\n\021end_quote_b"
  "alance\030\004 \001(\002\022\023\n\013start_price\030\005 \001(\002\022\021\n\tend"
  "_price\030\006 \001(\002\022\023\n\013start_value\030\007 \001(\002\022\021\n\tend"
  "_value\030\010 \001(\002\022\035\n\025total_executed_orders\030\t "
  "\001(\005\022\021\n\ttotal_fee\030\n \001(\002\022\027\n\017base_volatilit"
  "y\030\013 \001(\002\022\031\n\021trader_volatility\030\014 \001(\002\"\177\n\020Ev"
  "aluationConfig\022\033\n\023start_timestamp_sec\030\001 "
  "\001(\003\022\031\n\021end_timestamp_sec\030\002 \001(\003\022 \n\030evalua"
  "tion_period_months\030\003 \001(\005\022\021\n\tfast_eval\030\004 "
  "\001(\010\"\272\003\n\020EvaluationResult\022-\n\016account_conf"
  "ig\030\001 \001(\0132\025.trader.AccountConfig\022-\n\013eval_"
  "config\030\002 \001(\0132\030.trader.EvaluationConfig\022\014"
  "\n\004name\030\003 \001(\t\022/\n\006period\030\004 \003(\0132\037.trader.Ev"
  "aluationResult.Period\022\r\n\005score\030\005 \001(\002\022\020\n\010"
  "avg_gain\030\006 \001(\002\022\025\n\ravg_base_gain\030\007 \001(\002\022!\n"
  "\031avg_total_executed_orders\030\010 \001(\002\022\025\n\ravg_"
  "total_fee\030\t \001(\002\032\226\001\n\006Period\022\033\n\023start_time"
  "stamp_sec\030\001 \001(\003\022\031\n\021end_timestamp_sec\030\002 \001"
  "(\003\022\'\n\006result\030\003 \001(\0132\027.trader.ExecutionRes"
  "ult\022\022\n\nfinal_gain\030\004 \001(\002\022\027\n\017base_final_ga"
  "in\030\005 \001(\002"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_eval_2feval_2eproto_deps[1] = {
  &::descriptor_table_base_2fbase_2eproto,
};
static ::_pbi::once_flag descriptor_table_eval_2feval_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_eval_2feval_2eproto = {
    false, false, 928, descriptor_table_protodef_eval_2feval_2eproto,
    "eval/eval.proto",
    &descriptor_table_eval_2feval_2eproto_once, descriptor_table_eval_2feval_2eproto_deps, 1, 4,
    schemas, file_default_instances, TableStruct_eval_2feval_2eproto::offsets,
    file_level_metadata_eval_2feval_2eproto, file_level_enum_descriptors_eval_2feval_2eproto,
    file_level_service_descriptors_eval_2feval_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_eval_2feval_2eproto_getter() {
  return &descriptor_table_eval_2feval_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_eval_2feval_2eproto(&descriptor_table_eval_2feval_2eproto);
namespace trader {

// ===================================================================

class ExecutionResult::_Internal {
 public:
  using HasBits = decltype(std::declval<ExecutionResult>()._impl_._has_bits_);
  static void set_has_start_base_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start_quote_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_end_base_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_end_quote_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_start_price(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_end_price(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_start_value(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_end_value(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_total_executed_orders(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_total_fee(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_base_volatility(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_trader_volatility(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

ExecutionResult::ExecutionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:trader.ExecutionResult)
}
ExecutionResult::ExecutionResult(const ExecutionResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExecutionResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_base_balance_){}
    , decltype(_impl_.start_quote_balance_){}
    , decltype(_impl_.end_base_balance_){}
    , decltype(_impl_.end_quote_balance_){}
    , decltype(_impl_.start_price_){}
    , decltype(_impl_.end_price_){}
    , decltype(_impl_.start_value_){}
    , decltype(_impl_.end_value_){}
    , decltype(_impl_.total_executed_orders_){}
    , decltype(_impl_.total_fee_){}
    , decltype(_impl_.base_volatility_){}
    , decltype(_impl_.trader_volatility_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.start_base_balance_, &from._impl_.start_base_balance_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.trader_volatility_) -
    reinterpret_cast<char*>(&_impl_.start_base_balance_)) + sizeof(_impl_.trader_volatility_));
  // @@protoc_insertion_point(copy_constructor:trader.ExecutionResult)
}

inline void ExecutionResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_base_balance_){0}
    , decltype(_impl_.start_quote_balance_){0}
    , decltype(_impl_.end_base_balance_){0}
    , decltype(_impl_.end_quote_balance_){0}
    , decltype(_impl_.start_price_){0}
    , decltype(_impl_.end_price_){0}
    , decltype(_impl_.start_value_){0}
    , decltype(_impl_.end_value_){0}
    , decltype(_impl_.total_executed_orders_){0}
    , decltype(_impl_.total_fee_){0}
    , decltype(_impl_.base_volatility_){0}
    , decltype(_impl_.trader_volatility_){0}
  };
}

ExecutionResult::~ExecutionResult() {
  // @@protoc_insertion_point(destructor:trader.ExecutionResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExecutionResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ExecutionResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExecutionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:trader.ExecutionResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.start_base_balance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.end_value_) -
        reinterpret_cast<char*>(&_impl_.start_base_balance_)) + sizeof(_impl_.end_value_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.total_executed_orders_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.trader_volatility_) -
        reinterpret_cast<char*>(&_impl_.total_executed_orders_)) + sizeof(_impl_.trader_volatility_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecutionResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float start_base_balance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_start_base_balance(&has_bits);
          _impl_.start_base_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float start_quote_balance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_start_quote_balance(&has_bits);
          _impl_.start_quote_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float end_base_balance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_end_base_balance(&has_bits);
          _impl_.end_base_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float end_quote_balance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_end_quote_balance(&has_bits);
          _impl_.end_quote_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float start_price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_start_price(&has_bits);
          _impl_.start_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float end_price = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_end_price(&has_bits);
          _impl_.end_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float start_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_start_value(&has_bits);
          _impl_.start_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float end_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_end_value(&has_bits);
          _impl_.end_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 total_executed_orders = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_total_executed_orders(&has_bits);
          _impl_.total_executed_orders_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float total_fee = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_total_fee(&has_bits);
          _impl_.total_fee_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float base_volatility = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_base_volatility(&has_bits);
          _impl_.base_volatility_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float trader_volatility = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_trader_volatility(&has_bits);
          _impl_.trader_volatility_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExecutionResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trader.ExecutionResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float start_base_balance = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_start_base_balance(), target);
  }

  // optional float start_quote_balance = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_start_quote_balance(), target);
  }

  // optional float end_base_balance = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_end_base_balance(), target);
  }

  // optional float end_quote_balance = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_end_quote_balance(), target);
  }

  // optional float start_price = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_start_price(), target);
  }

  // optional float end_price = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_end_price(), target);
  }

  // optional float start_value = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_start_value(), target);
  }

  // optional float end_value = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_end_value(), target);
  }

  // optional int32 total_executed_orders = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_total_executed_orders(), target);
  }

  // optional float total_fee = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_total_fee(), target);
  }

  // optional float base_volatility = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_base_volatility(), target);
  }

  // optional float trader_volatility = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_trader_volatility(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trader.ExecutionResult)
  return target;
}

size_t ExecutionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trader.ExecutionResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float start_base_balance = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float start_quote_balance = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float end_base_balance = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float end_quote_balance = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float start_price = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float end_price = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float start_value = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float end_value = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional int32 total_executed_orders = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_executed_orders());
    }

    // optional float total_fee = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float base_volatility = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float trader_volatility = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecutionResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExecutionResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecutionResult::GetClassData() const { return &_class_data_; }


void ExecutionResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExecutionResult*>(&to_msg);
  auto& from = static_cast<const ExecutionResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:trader.ExecutionResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.start_base_balance_ = from._impl_.start_base_balance_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.start_quote_balance_ = from._impl_.start_quote_balance_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.end_base_balance_ = from._impl_.end_base_balance_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.end_quote_balance_ = from._impl_.end_quote_balance_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.start_price_ = from._impl_.start_price_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.end_price_ = from._impl_.end_price_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.start_value_ = from._impl_.start_value_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.end_value_ = from._impl_.end_value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.total_executed_orders_ = from._impl_.total_executed_orders_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.total_fee_ = from._impl_.total_fee_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.base_volatility_ = from._impl_.base_volatility_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.trader_volatility_ = from._impl_.trader_volatility_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecutionResult::CopyFrom(const ExecutionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trader.ExecutionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionResult::IsInitialized() const {
  return true;
}

void ExecutionResult::InternalSwap(ExecutionResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExecutionResult, _impl_.trader_volatility_)
      + sizeof(ExecutionResult::_impl_.trader_volatility_)
      - PROTOBUF_FIELD_OFFSET(ExecutionResult, _impl_.start_base_balance_)>(
          reinterpret_cast<char*>(&_impl_.start_base_balance_),
          reinterpret_cast<char*>(&other->_impl_.start_base_balance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecutionResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_eval_2feval_2eproto_getter, &descriptor_table_eval_2feval_2eproto_once,
      file_level_metadata_eval_2feval_2eproto[0]);
}

// ===================================================================

class EvaluationConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<EvaluationConfig>()._impl_._has_bits_);
  static void set_has_start_timestamp_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end_timestamp_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_evaluation_period_months(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fast_eval(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

EvaluationConfig::EvaluationConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:trader.EvaluationConfig)
}
EvaluationConfig::EvaluationConfig(const EvaluationConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EvaluationConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_timestamp_sec_){}
    , decltype(_impl_.end_timestamp_sec_){}
    , decltype(_impl_.evaluation_period_months_){}
    , decltype(_impl_.fast_eval_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.start_timestamp_sec_, &from._impl_.start_timestamp_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fast_eval_) -
    reinterpret_cast<char*>(&_impl_.start_timestamp_sec_)) + sizeof(_impl_.fast_eval_));
  // @@protoc_insertion_point(copy_constructor:trader.EvaluationConfig)
}

inline void EvaluationConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_timestamp_sec_){int64_t{0}}
    , decltype(_impl_.end_timestamp_sec_){int64_t{0}}
    , decltype(_impl_.evaluation_period_months_){0}
    , decltype(_impl_.fast_eval_){false}
  };
}

EvaluationConfig::~EvaluationConfig() {
  // @@protoc_insertion_point(destructor:trader.EvaluationConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EvaluationConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EvaluationConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EvaluationConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:trader.EvaluationConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.start_timestamp_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.fast_eval_) -
        reinterpret_cast<char*>(&_impl_.start_timestamp_sec_)) + sizeof(_impl_.fast_eval_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EvaluationConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 start_timestamp_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_start_timestamp_sec(&has_bits);
          _impl_.start_timestamp_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 end_timestamp_sec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_end_timestamp_sec(&has_bits);
          _impl_.end_timestamp_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 evaluation_period_months = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_evaluation_period_months(&has_bits);
          _impl_.evaluation_period_months_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool fast_eval = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_fast_eval(&has_bits);
          _impl_.fast_eval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EvaluationConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trader.EvaluationConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 start_timestamp_sec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_start_timestamp_sec(), target);
  }

  // optional int64 end_timestamp_sec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_end_timestamp_sec(), target);
  }

  // optional int32 evaluation_period_months = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_evaluation_period_months(), target);
  }

  // optional bool fast_eval = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_fast_eval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trader.EvaluationConfig)
  return target;
}

size_t EvaluationConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trader.EvaluationConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int64 start_timestamp_sec = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_start_timestamp_sec());
    }

    // optional int64 end_timestamp_sec = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_end_timestamp_sec());
    }

    // optional int32 evaluation_period_months = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_evaluation_period_months());
    }

    // optional bool fast_eval = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EvaluationConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EvaluationConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EvaluationConfig::GetClassData() const { return &_class_data_; }


void EvaluationConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EvaluationConfig*>(&to_msg);
  auto& from = static_cast<const EvaluationConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:trader.EvaluationConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.start_timestamp_sec_ = from._impl_.start_timestamp_sec_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.end_timestamp_sec_ = from._impl_.end_timestamp_sec_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.evaluation_period_months_ = from._impl_.evaluation_period_months_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.fast_eval_ = from._impl_.fast_eval_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EvaluationConfig::CopyFrom(const EvaluationConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trader.EvaluationConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvaluationConfig::IsInitialized() const {
  return true;
}

void EvaluationConfig::InternalSwap(EvaluationConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EvaluationConfig, _impl_.fast_eval_)
      + sizeof(EvaluationConfig::_impl_.fast_eval_)
      - PROTOBUF_FIELD_OFFSET(EvaluationConfig, _impl_.start_timestamp_sec_)>(
          reinterpret_cast<char*>(&_impl_.start_timestamp_sec_),
          reinterpret_cast<char*>(&other->_impl_.start_timestamp_sec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EvaluationConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_eval_2feval_2eproto_getter, &descriptor_table_eval_2feval_2eproto_once,
      file_level_metadata_eval_2feval_2eproto[1]);
}

// ===================================================================

class EvaluationResult_Period::_Internal {
 public:
  using HasBits = decltype(std::declval<EvaluationResult_Period>()._impl_._has_bits_);
  static void set_has_start_timestamp_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_end_timestamp_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::trader::ExecutionResult& result(const EvaluationResult_Period* msg);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_final_gain(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_base_final_gain(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::trader::ExecutionResult&
EvaluationResult_Period::_Internal::result(const EvaluationResult_Period* msg) {
  return *msg->_impl_.result_;
}
EvaluationResult_Period::EvaluationResult_Period(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:trader.EvaluationResult.Period)
}
EvaluationResult_Period::EvaluationResult_Period(const EvaluationResult_Period& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EvaluationResult_Period* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){nullptr}
    , decltype(_impl_.start_timestamp_sec_){}
    , decltype(_impl_.end_timestamp_sec_){}
    , decltype(_impl_.final_gain_){}
    , decltype(_impl_.base_final_gain_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    _this->_impl_.result_ = new ::trader::ExecutionResult(*from._impl_.result_);
  }
  ::memcpy(&_impl_.start_timestamp_sec_, &from._impl_.start_timestamp_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.base_final_gain_) -
    reinterpret_cast<char*>(&_impl_.start_timestamp_sec_)) + sizeof(_impl_.base_final_gain_));
  // @@protoc_insertion_point(copy_constructor:trader.EvaluationResult.Period)
}

inline void EvaluationResult_Period::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){nullptr}
    , decltype(_impl_.start_timestamp_sec_){int64_t{0}}
    , decltype(_impl_.end_timestamp_sec_){int64_t{0}}
    , decltype(_impl_.final_gain_){0}
    , decltype(_impl_.base_final_gain_){0}
  };
}

EvaluationResult_Period::~EvaluationResult_Period() {
  // @@protoc_insertion_point(destructor:trader.EvaluationResult.Period)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EvaluationResult_Period::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.result_;
}

void EvaluationResult_Period::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EvaluationResult_Period::Clear() {
// @@protoc_insertion_point(message_clear_start:trader.EvaluationResult.Period)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.result_ != nullptr);
    _impl_.result_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.start_timestamp_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.base_final_gain_) -
        reinterpret_cast<char*>(&_impl_.start_timestamp_sec_)) + sizeof(_impl_.base_final_gain_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EvaluationResult_Period::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 start_timestamp_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_start_timestamp_sec(&has_bits);
          _impl_.start_timestamp_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 end_timestamp_sec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_end_timestamp_sec(&has_bits);
          _impl_.end_timestamp_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .trader.ExecutionResult result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float final_gain = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_final_gain(&has_bits);
          _impl_.final_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float base_final_gain = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_base_final_gain(&has_bits);
          _impl_.base_final_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EvaluationResult_Period::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trader.EvaluationResult.Period)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 start_timestamp_sec = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_start_timestamp_sec(), target);
  }

  // optional int64 end_timestamp_sec = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_end_timestamp_sec(), target);
  }

  // optional .trader.ExecutionResult result = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  // optional float final_gain = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_final_gain(), target);
  }

  // optional float base_final_gain = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_base_final_gain(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trader.EvaluationResult.Period)
  return target;
}

size_t EvaluationResult_Period::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trader.EvaluationResult.Period)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .trader.ExecutionResult result = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.result_);
    }

    // optional int64 start_timestamp_sec = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_start_timestamp_sec());
    }

    // optional int64 end_timestamp_sec = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_end_timestamp_sec());
    }

    // optional float final_gain = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float base_final_gain = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EvaluationResult_Period::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EvaluationResult_Period::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EvaluationResult_Period::GetClassData() const { return &_class_data_; }


void EvaluationResult_Period::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EvaluationResult_Period*>(&to_msg);
  auto& from = static_cast<const EvaluationResult_Period&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:trader.EvaluationResult.Period)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_result()->::trader::ExecutionResult::MergeFrom(
          from._internal_result());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.start_timestamp_sec_ = from._impl_.start_timestamp_sec_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.end_timestamp_sec_ = from._impl_.end_timestamp_sec_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.final_gain_ = from._impl_.final_gain_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.base_final_gain_ = from._impl_.base_final_gain_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EvaluationResult_Period::CopyFrom(const EvaluationResult_Period& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trader.EvaluationResult.Period)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvaluationResult_Period::IsInitialized() const {
  return true;
}

void EvaluationResult_Period::InternalSwap(EvaluationResult_Period* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EvaluationResult_Period, _impl_.base_final_gain_)
      + sizeof(EvaluationResult_Period::_impl_.base_final_gain_)
      - PROTOBUF_FIELD_OFFSET(EvaluationResult_Period, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EvaluationResult_Period::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_eval_2feval_2eproto_getter, &descriptor_table_eval_2feval_2eproto_once,
      file_level_metadata_eval_2feval_2eproto[2]);
}

// ===================================================================

class EvaluationResult::_Internal {
 public:
  using HasBits = decltype(std::declval<EvaluationResult>()._impl_._has_bits_);
  static const ::trader::AccountConfig& account_config(const EvaluationResult* msg);
  static void set_has_account_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::trader::EvaluationConfig& eval_config(const EvaluationResult* msg);
  static void set_has_eval_config(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_avg_gain(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_avg_base_gain(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_avg_total_executed_orders(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_avg_total_fee(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::trader::AccountConfig&
EvaluationResult::_Internal::account_config(const EvaluationResult* msg) {
  return *msg->_impl_.account_config_;
}
const ::trader::EvaluationConfig&
EvaluationResult::_Internal::eval_config(const EvaluationResult* msg) {
  return *msg->_impl_.eval_config_;
}
void EvaluationResult::clear_account_config() {
  if (_impl_.account_config_ != nullptr) _impl_.account_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
EvaluationResult::EvaluationResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:trader.EvaluationResult)
}
EvaluationResult::EvaluationResult(const EvaluationResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EvaluationResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.period_){from._impl_.period_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.account_config_){nullptr}
    , decltype(_impl_.eval_config_){nullptr}
    , decltype(_impl_.score_){}
    , decltype(_impl_.avg_gain_){}
    , decltype(_impl_.avg_base_gain_){}
    , decltype(_impl_.avg_total_executed_orders_){}
    , decltype(_impl_.avg_total_fee_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_account_config()) {
    _this->_impl_.account_config_ = new ::trader::AccountConfig(*from._impl_.account_config_);
  }
  if (from._internal_has_eval_config()) {
    _this->_impl_.eval_config_ = new ::trader::EvaluationConfig(*from._impl_.eval_config_);
  }
  ::memcpy(&_impl_.score_, &from._impl_.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.avg_total_fee_) -
    reinterpret_cast<char*>(&_impl_.score_)) + sizeof(_impl_.avg_total_fee_));
  // @@protoc_insertion_point(copy_constructor:trader.EvaluationResult)
}

inline void EvaluationResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.period_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.account_config_){nullptr}
    , decltype(_impl_.eval_config_){nullptr}
    , decltype(_impl_.score_){0}
    , decltype(_impl_.avg_gain_){0}
    , decltype(_impl_.avg_base_gain_){0}
    , decltype(_impl_.avg_total_executed_orders_){0}
    , decltype(_impl_.avg_total_fee_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EvaluationResult::~EvaluationResult() {
  // @@protoc_insertion_point(destructor:trader.EvaluationResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EvaluationResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.period_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.account_config_;
  if (this != internal_default_instance()) delete _impl_.eval_config_;
}

void EvaluationResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EvaluationResult::Clear() {
// @@protoc_insertion_point(message_clear_start:trader.EvaluationResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.period_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.account_config_ != nullptr);
      _impl_.account_config_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.eval_config_ != nullptr);
      _impl_.eval_config_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.avg_total_fee_) -
        reinterpret_cast<char*>(&_impl_.score_)) + sizeof(_impl_.avg_total_fee_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EvaluationResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .trader.AccountConfig account_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .trader.EvaluationConfig eval_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_eval_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "trader.EvaluationResult.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .trader.EvaluationResult.Period period = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_period(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional float score = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_score(&has_bits);
          _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float avg_gain = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_avg_gain(&has_bits);
          _impl_.avg_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float avg_base_gain = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_avg_base_gain(&has_bits);
          _impl_.avg_base_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float avg_total_executed_orders = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_avg_total_executed_orders(&has_bits);
          _impl_.avg_total_executed_orders_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float avg_total_fee = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_avg_total_fee(&has_bits);
          _impl_.avg_total_fee_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EvaluationResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:trader.EvaluationResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .trader.AccountConfig account_config = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::account_config(this),
        _Internal::account_config(this).GetCachedSize(), target, stream);
  }

  // optional .trader.EvaluationConfig eval_config = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::eval_config(this),
        _Internal::eval_config(this).GetCachedSize(), target, stream);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "trader.EvaluationResult.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // repeated .trader.EvaluationResult.Period period = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_period_size()); i < n; i++) {
    const auto& repfield = this->_internal_period(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional float score = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_score(), target);
  }

  // optional float avg_gain = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_avg_gain(), target);
  }

  // optional float avg_base_gain = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_avg_base_gain(), target);
  }

  // optional float avg_total_executed_orders = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_avg_total_executed_orders(), target);
  }

  // optional float avg_total_fee = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_avg_total_fee(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:trader.EvaluationResult)
  return target;
}

size_t EvaluationResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:trader.EvaluationResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .trader.EvaluationResult.Period period = 4;
  total_size += 1UL * this->_internal_period_size();
  for (const auto& msg : this->_impl_.period_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .trader.AccountConfig account_config = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.account_config_);
    }

    // optional .trader.EvaluationConfig eval_config = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.eval_config_);
    }

    // optional float score = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float avg_gain = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float avg_base_gain = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float avg_total_executed_orders = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float avg_total_fee = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EvaluationResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EvaluationResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EvaluationResult::GetClassData() const { return &_class_data_; }


void EvaluationResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EvaluationResult*>(&to_msg);
  auto& from = static_cast<const EvaluationResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:trader.EvaluationResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.period_.MergeFrom(from._impl_.period_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_account_config()->::trader::AccountConfig::MergeFrom(
          from._internal_account_config());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_eval_config()->::trader::EvaluationConfig::MergeFrom(
          from._internal_eval_config());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.score_ = from._impl_.score_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.avg_gain_ = from._impl_.avg_gain_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.avg_base_gain_ = from._impl_.avg_base_gain_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.avg_total_executed_orders_ = from._impl_.avg_total_executed_orders_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.avg_total_fee_ = from._impl_.avg_total_fee_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EvaluationResult::CopyFrom(const EvaluationResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:trader.EvaluationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvaluationResult::IsInitialized() const {
  return true;
}

void EvaluationResult::InternalSwap(EvaluationResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.period_.InternalSwap(&other->_impl_.period_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EvaluationResult, _impl_.avg_total_fee_)
      + sizeof(EvaluationResult::_impl_.avg_total_fee_)
      - PROTOBUF_FIELD_OFFSET(EvaluationResult, _impl_.account_config_)>(
          reinterpret_cast<char*>(&_impl_.account_config_),
          reinterpret_cast<char*>(&other->_impl_.account_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EvaluationResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_eval_2feval_2eproto_getter, &descriptor_table_eval_2feval_2eproto_once,
      file_level_metadata_eval_2feval_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace trader
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::trader::ExecutionResult*
Arena::CreateMaybeMessage< ::trader::ExecutionResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trader::ExecutionResult >(arena);
}
template<> PROTOBUF_NOINLINE ::trader::EvaluationConfig*
Arena::CreateMaybeMessage< ::trader::EvaluationConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trader::EvaluationConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::trader::EvaluationResult_Period*
Arena::CreateMaybeMessage< ::trader::EvaluationResult_Period >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trader::EvaluationResult_Period >(arena);
}
template<> PROTOBUF_NOINLINE ::trader::EvaluationResult*
Arena::CreateMaybeMessage< ::trader::EvaluationResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::trader::EvaluationResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
